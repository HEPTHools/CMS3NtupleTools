#include <cassert>
#include <sstream>
#include <FWCore/Utilities/interface/Exception.h>
#include <DataFormats/HepMCCandidate/interface/GenParticle.h>
#include <SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h>
#include <CMS3/NtupleMaker/interface/CMS3ObjectHelpers.h>
#include <CMS3/NtupleMaker/interface/KFactorHelpers.h>
#include <CMSDataTools/AnalysisTree/interface/HostHelpersCore.h>
#include "MELAStreamHelpers.hh"
#include "TDirectory.h"


using namespace std;
using namespace MELAStreamHelpers;


namespace KFactorHelpers{

  float getBeamEnergy(int const& year){
    float beamEnergy=0;
    switch (year){
    case 2011:
      beamEnergy=3500;
      break;
    case 2012:
      beamEnergy=4000;
      break;
    case 2015:
    case 2016:
    case 2017:
    case 2018:
      beamEnergy=6500;
      break;

    default:
      throw cms::Exception("UnknownYear") << "KFactorHelpers::getBeamEnergy: Beam energy for year " << year << " is not implemented.";
      break;
    }
    return beamEnergy;
  }

  void getVVTopology(
    VVFinalStateType const& type,
    std::vector<reco::GenParticle> const& genparticles,
    std::vector<reco::GenParticle const*>& incomingQuarks,
    std::vector<reco::GenParticle const*>& incomingGluons,
    std::vector<reco::GenParticle const*>& outgoingQuarks,
    std::vector<reco::GenParticle const*>& outgoingGluons,
    std::pair<reco::GenParticle const*, reco::GenParticle const*>& V1pair,
    std::pair<reco::GenParticle const*, reco::GenParticle const*>& V2pair
  ){
    static const float mZsq = PDGHelpers::Zmass * PDGHelpers::Zmass;
    static const float mWsq = PDGHelpers::Wmass * PDGHelpers::Wmass;
    static const float mZGaZ = PDGHelpers::Zmass * PDGHelpers::Zwidth;
    static const float mWGaW = PDGHelpers::Wmass * PDGHelpers::Wwidth;
    static const float mZGaZsq = mZGaZ*mZGaZ;
    static const float mWGaWsq = mWGaW*mWGaW;

    bool const doZZ = (type == kZZ);
    bool const doWZ = (type == kWZ);
    bool const doWW = (type == kWW);
    if (!doZZ && !doWZ && !doWW){
      throw cms::Exception("InvalidTopology") << "KFactorHelpers::getVVTopology: Invalid VV topology flag " << type;
      return;
    }

    incomingQuarks.clear(); incomingQuarks.reserve(2);
    incomingGluons.clear(); incomingGluons.reserve(2);
    outgoingQuarks.clear(); outgoingQuarks.reserve(2);
    outgoingGluons.clear(); outgoingGluons.reserve(2);
    std::vector<reco::GenParticle const*> lepMinusPlus[3][2]; // l-, l+
    std::vector<reco::GenParticle const*> lepNuNubar[3][2]; // nu, nub
    std::vector<reco::GenParticle const*> quarkAntiquark[6][2]; // q, qb
    for (auto it_part = genparticles.cbegin(); it_part != genparticles.cend(); it_part++){
      reco::GenParticle const* part = &(*it_part);
      if (!part->isHardProcess()) continue;
      int id = part->pdgId();
      int status = part->status();
      if (PDGHelpers::isAQuark(id) && status == 21) incomingQuarks.push_back(part);
      else if (PDGHelpers::isAGluon(id) && status == 21) incomingGluons.push_back(part);
      else if (PDGHelpers::isAQuark(id)) quarkAntiquark[std::abs(id)-1][(id>0 ? 0 : 1)].push_back(part);
      else if (PDGHelpers::isALepton(id)) lepMinusPlus[(std::abs(id)-11)/2][(id>0 ? 0 : 1)].push_back(part);
      else if (PDGHelpers::isANeutrino(id)) lepNuNubar[(std::abs(id)-12)/2][(id>0 ? 0 : 1)].push_back(part);
      else if (PDGHelpers::isAGluon(id)) outgoingGluons.push_back(part);
    }
    CMS3ObjectHelpers::sortByGreaterPz(incomingQuarks);
    CMS3ObjectHelpers::sortByGreaterPz(incomingGluons);

    /*
    for (auto const& part:incomingQuarks) MELAout << "Incoming quark (id, status) = ( " << part->pdgId() << " , " << part->status() << " )" << endl;
    for (auto const& part:incomingGluons) MELAout << "Incoming gluon (id, status) = ( " << part->pdgId() << " , " << part->status() << " )" << endl;
    for (unsigned short c=0; c<3; c++){
      for (unsigned short d=0; d<2; d++){
        for (auto const& part:lepMinusPlus[c][d]) MELAout << "Lepton[" << c << "][" << d << "] (id, status) = ( " << part->pdgId() << " , " << part->status() << " )" << endl;
      }
    }
    for (unsigned short c=0; c<3; c++){
      for (unsigned short d=0; d<2; d++){
        for (auto const& part:lepNuNubar[c][d]) MELAout << "Neutrino[" << c << "][" << d << "] (id, status) = ( " << part->pdgId() << " , " << part->status() << " )" << endl;
      }
    }
    for (unsigned short c=0; c<6; c++){
      for (unsigned short d=0; d<2; d++){
        for (auto const& part:quarkAntiquark[c][d]) MELAout << "Quark[" << c << "][" << d << "] (id, status) = ( " << part->pdgId() << " , " << part->status() << " )" << endl;
      }
    }
    */

    // First, construct all possible Vs
    std::vector< std::pair<reco::GenParticle const*, reco::GenParticle const*> > tmpVhandle;
    if (doZZ || doWZ){ // Find Zs
      for (unsigned char c=0; c<3; c++){ for (auto const& F1:lepMinusPlus[c][0]){ for (auto const& F2:lepMinusPlus[c][1]) tmpVhandle.emplace_back(F1, F2); } }
      for (unsigned char c=0; c<3; c++){ for (auto const& F1:lepNuNubar[c][0]){ for (auto const& F2:lepNuNubar[c][1]) tmpVhandle.emplace_back(F1, F2); } }
      for (unsigned char c=0; c<6; c++){ for (auto const& F1:quarkAntiquark[c][0]){ for (auto const& F2:quarkAntiquark[c][1]) tmpVhandle.emplace_back(F1, F2); } }
    }
    if (doWW || doWZ){ // Find Ws
      for (unsigned char c=0; c<3; c++){
        for (unsigned char signW=0; signW<2; signW++){ // ==0: W+, ==1: W-
          for (auto const& F1:lepMinusPlus[c][1-signW]){
            for (auto const& F2:lepNuNubar[c][signW]) tmpVhandle.emplace_back(F1, F2);
          }
        }
      }
      for (unsigned char c=0; c<6; c++){
        for (unsigned char d=0; d<6; d++){
          if (d%2 == c%2) continue;
          for (auto const& F1:quarkAntiquark[c][0]){
            for (auto const& F2:quarkAntiquark[d][1]) tmpVhandle.emplace_back(F1, F2);
          }
        }
      }
    }
    for (auto& tmppair:tmpVhandle){ if (tmppair.first->pdgId()<0) std::swap(tmppair.first, tmppair.second); }
    //for (auto const& tmppair:tmpVhandle) MELAout << "Intermediate V (m=" << (tmppair.first->p4() + tmppair.second->p4()).M() << ") found. (id1, st1) = " << tmppair.first->pdgId() << ", " << tmppair.first->status() << ", (id2, st2) = " << tmppair.second->pdgId() << ", " << tmppair.second->status() << endl;

    // Determine best V1 and V2
    std::pair<reco::GenParticle const*, reco::GenParticle const*> const* bestV1pair=nullptr;
    std::pair<reco::GenParticle const*, reco::GenParticle const*> const* bestV2pair=nullptr;
    float bestDiffMass=-1;
    for (auto it1 = tmpVhandle.cbegin(); it1!=tmpVhandle.cend(); it1++){
      auto const& Vi = *it1;
      for (auto it2 = it1; it2!=tmpVhandle.cend(); it2++){
        if (it2==it1) continue;
        auto const& Vj = *it2;
        if (Vi.first==Vj.first || Vi.first==Vj.second || Vi.second==Vj.first || Vi.second==Vj.second) continue;
        bool isViZ = Vi.first->pdgId() == -Vi.second->pdgId();
        bool isVjZ = Vj.first->pdgId() == -Vj.second->pdgId();
        if (doZZ && !(isViZ && isVjZ)) continue;
        if (doWZ && (isViZ == isVjZ)) continue;
        if (doWW){
          if (isViZ || isVjZ) continue;
          // Additional check to ensure that the incoming single quark flavor is conserved
          if (incomingQuarks.size()==1){
            int qflav = incomingQuarks.front()->pdgId();
            unsigned int n_outgoing_sameflavors=0;
            for (auto const& part:quarkAntiquark[std::abs(qflav)-1][qflav>0 ? 0 : 1]){
              if (part==Vi.first || part==Vi.second || part==Vj.first || part==Vj.second) continue;
              n_outgoing_sameflavors++;
            }
            if (n_outgoing_sameflavors%2 == 0) continue; // Make sure there is an odd number of them
          }
        }
        auto pVi = Vi.first->p4() + Vi.second->p4();
        auto pVj = Vj.first->p4() + Vj.second->p4();
        float diffMass = std::pow((std::pow(pVi.M(), 2) - (isViZ ? mZsq : mWsq)), 2) + (isViZ ? mZGaZsq : mWGaWsq);
        diffMass *= std::pow((std::pow(pVj.M(), 2) - (isVjZ ? mZsq : mWsq)), 2) + (isVjZ ? mZGaZsq : mWGaWsq);
        if (bestDiffMass<0.f || diffMass<bestDiffMass){
          bestDiffMass = diffMass;
          bestV1pair = &Vi;
          bestV2pair = &Vj;
        }
      }
    }

    if (!bestV1pair) throw cms::Exception("InvalidTopology") << "KFactorHelpers::getVVTopology: Best V1 cannot be determined!";
    if (!bestV2pair) throw cms::Exception("InvalidTopology") << "KFactorHelpers::getVVTopology: Best V2 cannot be determined!";

    // Return best-Z, second-best-Z in ZZ, ZW in WZ, and W+W- in WW
    bool doSwap = false;
    auto pBestV1 = bestV1pair->first->p4() + bestV1pair->second->p4();
    auto pBestV2 = bestV2pair->first->p4() + bestV2pair->second->p4();
    if (doWW) doSwap = (PDGHelpers::isANeutrino(bestV2pair->first->pdgId()) || PDGHelpers::isUpTypeQuark(bestV2pair->first->pdgId()));
    else if (doWZ) doSwap = (bestV2pair->first->pdgId() == -bestV2pair->second->pdgId());
    else doSwap = (std::abs(pBestV1.M() - PDGHelpers::Zmass)>std::abs(pBestV2.M() - PDGHelpers::Zmass));
    if (doSwap) std::swap(bestV1pair, bestV2pair);

    //MELAout << "m12 = " << (bestV1pair->first->p4() + bestV1pair->second->p4()).M() << endl;
    //MELAout << "m34 = " << (bestV2pair->first->p4() + bestV2pair->second->p4()).M() << endl;

    V1pair = *bestV1pair;
    V2pair = *bestV2pair;
    
    // Finally, determine the associated outgoing quarks
    for (unsigned char c=0; c<6; c++){
      for (unsigned char d=0; d<1; d++){
        for (auto const& part:quarkAntiquark[c][d]){
          if (part==bestV1pair->first || part==bestV1pair->second || part==bestV2pair->first || part==bestV2pair->second) continue;
          outgoingQuarks.push_back(part);
        }
      }
    }
  }

  double xsecRatio_qqZZ4f_QCD_NLO_NNLO_13TeV_byMass(double mass, bool is_4f_2f2fp, unsigned char order){ // is_4f_2f2fp: 0=4l, 1=2l2l'; order: 0=NLO/LO, 1=NNLO/NLO
    // Xsecs come from CJLST/ZZAnalysis:AnalysisStep/src/kFactors.C::xsec_qqZZ_qcd_M
    static const std::vector< std::vector< std::vector<double> > > xseclist={
      {
        { 0, 1.095828532, 1.623089848, 2.006355102 },
        { 25, 1.70498411, 2.55680607, 3.00553358 },
        { 50, 0.7214786, 1.07670322, 1.26022261 },
        { 75, 9.93585169, 12.49651341, 12.8890551 },
        { 100, 1.88979055, 2.32301901, 2.44580392 },
        { 125, 0.80689284, 1.06246962, 1.18239288 },
        { 150, 0.420080936, 0.576994967, 0.65408981 },
        { 175, 0.573751417, 0.755001119, 0.83318604 },
        { 200, 0.6426366, 0.84359613, 0.92841113 },
        { 225, 0.460870086, 0.6155138, 0.68305214 },
        { 250, 0.325131608, 0.440635023, 0.493815795 },
        { 275, 0.234474317, 0.321194629, 0.358418201 },
        { 300, 0.173099357, 0.239157872, 0.272415573 },
        { 325, 0.130327192, 0.18182296, 0.208832023 },
        { 350, 0.100194403, 0.140405709, 0.160927729 },
        { 375, 0.078065965, 0.109969337, 0.125995342 },
        { 400, 0.061860538, 0.087368406, 0.099450959 },
        { 425, 0.049470606, 0.070200812, 0.081096816 },
        { 450, 0.040036726, 0.057035286, 0.064837612 },
        { 475, 0.03272652, 0.046808668, 0.053386015 }
      },
      {
        { 0, 5.80657303, 8.38413944, 10.48809451 },
        { 25, 4.62863121, 6.84873304, 8.38692118 },
        { 50, 1.61514729, 2.39428421, 2.85607864 },
        { 75, 19.10610496, 24.00530313, 25.10894849 },
        { 100, 3.86816714, 4.7520914, 5.14762763 },
        { 125, 1.64560534, 2.16841494, 2.38514732 },
        { 150, 0.85582638, 1.17224019, 1.3679862 },
        { 175, 1.1629688, 1.52672919, 1.68549457 },
        { 200, 1.29516749, 1.69836336, 1.87826529 },
        { 225, 0.92621932, 1.23581661, 1.36793012 },
        { 250, 0.65489237, 0.88543635, 0.98456032 },
        { 275, 0.470967807, 0.64402568, 0.73111461 },
        { 300, 0.347254403, 0.480862926, 0.538062005 },
        { 325, 0.261981026, 0.363080611, 0.413543401 },
        { 350, 0.201165289, 0.280556435, 0.323941619 },
        { 375, 0.157331951, 0.220998012, 0.259322746 },
        { 400, 0.124083729, 0.174598837, 0.209681592 },
        { 425, 0.099317367, 0.139860047, 0.166315351 },
        { 450, 0.080436156, 0.114091349, 0.135250739 },
        { 475, 0.065390164, 0.093794404, 0.104784251 }
      }
    };

    if (mass<0.) mass=0;
    std::vector< std::vector<double> > const& xsec = xseclist.at(is_4f_2f2fp);
    auto it_xsec = xsec.cbegin();
    auto itEnd_xsec = xsec.cend();
    for (; it_xsec != itEnd_xsec; it_xsec++){
      auto itNext_xsec = it_xsec; itNext_xsec++;
      if (mass>=it_xsec->front() && (itNext_xsec==itEnd_xsec || mass<itNext_xsec->front())) break;
    }
    if (static_cast<size_t>(order+2)>=it_xsec->size()) throw cms::Exception("UnknownOrder") << "KFactorHelpers::xsecRatio_qqZZ4f_QCD_NLO_NNLO_13TeV_byMass: Order " << order << " is not implemented.";
    return it_xsec->at(order+2) / it_xsec->at(order+1);
  }

  double xsecRatio_qqWW4f_QCD_NLO_NNLO_13TeV_byPt(double pt, unsigned char order){ // order: 0=NLO/LO, 1=NNLO/NLO
    // Xsecs come from latinos/LatinoAnalysis commit 9864c75c7d532b57fa399d0631634e98e87108d4. Later commit is totally useless because it tells only about NNLL corrections on NNLO, and nothing about the actual NNLO/NLO or NLO/LO ratios.
    // NLO = Gardener/python/data/wwresum/powheg_2l2nu_nlo.dat (multiplied by 1000 to match nnlo_central.dat)
    // NNLO = Gardener/python/data/wwresum/nnlo_central.dat
    static const std::vector< std::pair<double, double> > pt_dxsecNLOdpt_pairs={
      { 0, 45.5417 },
      { 0.25, 359.563 },
      { 0.5, 687.464 },
      { 0.75, 1021.22 },
      { 1, 1362.78 },
      { 1.25, 1660.97 },
      { 1.5, 1980.2 },
      { 1.75, 2250.41 },
      { 2, 2472.92 },
      { 2.25, 2708.43 },
      { 2.5, 2866.31 },
      { 2.75, 3085.56 },
      { 3, 3199.85 },
      { 3.25, 3328.02 },
      { 3.5, 3370.09 },
      { 3.75, 3447.29 },
      { 4, 3506.5 },
      { 4.25, 3515.82 },
      { 4.5, 3578.5 },
      { 4.75, 3549 },
      { 5, 3569.39 },
      { 5.25, 3581.75 },
      { 5.5, 3526.88 },
      { 5.75, 3500.21 },
      { 6, 3499.34 },
      { 6.25, 3467.03 },
      { 6.5, 3434.72 },
      { 6.75, 3355.34 },
      { 7, 3286.81 },
      { 7.25, 3330.4 },
      { 7.5, 3261.44 },
      { 7.75, 3207.22 },
      { 8, 3185.54 },
      { 8.25, 3126.55 },
      { 8.5, 3079.06 },
      { 8.75, 3042.84 },
      { 9, 3032.65 },
      { 9.25, 2938.09 },
      { 9.5, 2898.84 },
      { 9.75, 2903.61 },
      { 10, 2828.58 },
      { 10.25, 2813.61 },
      { 10.5, 2791.28 },
      { 10.75, 2734.89 },
      { 11, 2676.99 },
      { 11.25, 2638.39 },
      { 11.5, 2629.71 },
      { 11.75, 2609.76 },
      { 12, 2557.71 },
      { 12.25, 2530.39 },
      { 12.5, 2483.33 },
      { 12.75, 2449.71 },
      { 13, 2431.93 },
      { 13.25, 2369.91 },
      { 13.5, 2367.09 },
      { 13.75, 2274.48 },
      { 14, 2302.03 },
      { 14.25, 2255.83 },
      { 14.5, 2257.57 },
      { 14.75, 2237.4 },
      { 15, 2190.99 },
      { 15.25, 2149.79 },
      { 15.5, 2107.28 },
      { 15.75, 2052.2 },
      { 16, 2058.27 },
      { 16.25, 2049.16 },
      { 16.5, 2021.19 },
      { 16.75, 1987.14 },
      { 17, 1934.01 },
      { 17.25, 1925.77 },
      { 17.5, 1897.57 },
      { 17.75, 1893.89 },
      { 18, 1846.18 },
      { 18.25, 1856.37 },
      { 18.5, 1810.61 },
      { 18.75, 1801.07 },
      { 19, 1767.67 },
      { 19.25, 1739.91 },
      { 19.5, 1729.94 },
      { 19.75, 1731.02 },
      { 20, 1698.92 },
      { 20.25, 1655.98 },
      { 20.5, 1655.77 },
      { 20.75, 1660.54 },
      { 21, 1621.29 },
      { 21.25, 1565.55 },
      { 21.5, 1604.15 },
      { 21.75, 1549.07 },
      { 22, 1525.43 },
      { 22.25, 1545.17 },
      { 22.5, 1476.2 },
      { 22.75, 1465.79 },
      { 23, 1483.14 },
      { 23.25, 1449.31 },
      { 23.5, 1453.65 },
      { 23.75, 1431.31 },
      { 24, 1415.05 },
      { 24.25, 1363.22 },
      { 24.5, 1375.79 },
      { 24.75, 1317.67 },
      { 25, 1328.3 },
      { 25.25, 1343.92 },
      { 25.5, 1335.02 },
      { 25.75, 1307.92 },
      { 26, 1287.53 },
      { 26.25, 1285.8 },
      { 26.5, 1285.14 },
      { 26.75, 1220.95 },
      { 27, 1238.52 },
      { 27.25, 1246.98 },
      { 27.5, 1206.64 },
      { 27.75, 1167.17 },
      { 28, 1173.24 },
      { 28.25, 1166.3 },
      { 28.5, 1167.6 },
      { 28.75, 1151.12 },
      { 29, 1141.36 },
      { 29.25, 1117.29 },
      { 29.5, 1117.07 },
      { 29.75, 1103.63 },
      { 30, 1104.28 },
      { 30.25, 1051.36 },
      { 30.5, 1076.09 },
      { 30.75, 1031.63 },
      { 31, 1036.18 },
      { 31.25, 1045.94 },
      { 31.5, 1038.35 },
      { 31.75, 1035.1 },
      { 32, 1026.21 },
      { 32.25, 988.906 },
      { 32.5, 1007.34 },
      { 32.75, 983.485 },
      { 33, 980.232 },
      { 33.25, 976.762 },
      { 33.5, 969.172 },
      { 33.75, 966.569 },
      { 34, 945.75 },
      { 34.25, 921.028 },
      { 34.5, 898.257 },
      { 34.75, 918.425 },
      { 35, 917.124 },
      { 35.25, 907.799 },
      { 35.5, 894.787 },
      { 35.75, 891.534 },
      { 36, 860.739 },
      { 36.25, 880.04 },
      { 36.5, 852.281 },
      { 36.75, 877.221 },
      { 37, 845.775 },
      { 37.25, 835.366 },
      { 37.5, 843.607 },
      { 37.75, 789.607 },
      { 38, 820.402 },
      { 38.25, 802.185 },
      { 38.5, 811.944 },
      { 38.75, 804.354 },
      { 39, 787.005 },
      { 39.25, 776.161 },
      { 39.5, 782.884 },
      { 39.75, 754.041 },
      { 40, 775.945 },
      { 40.25, 759.246 },
      { 40.5, 784.836 },
      { 40.75, 742.764 },
      { 41, 738.861 },
      { 41.25, 733.656 },
      { 41.5, 716.74 },
      { 41.75, 712.837 },
      { 42, 699.391 },
      { 42.25, 701.343 },
      { 42.5, 697.222 },
      { 42.75, 705.463 },
      { 43, 690.933 },
      { 43.25, 680.524 },
      { 43.5, 665.777 },
      { 43.75, 686.379 },
      { 44, 653.632 },
      { 44.25, 674.668 },
      { 44.5, 652.982 },
      { 44.75, 659.488 },
      { 45, 660.572 },
      { 45.25, 637.584 },
      { 45.5, 649.729 },
      { 45.75, 645.175 },
      { 46, 619.368 },
      { 46.25, 621.32 },
      { 46.5, 631.946 },
      { 46.75, 625.874 },
      { 47, 609.175 },
      { 47.25, 605.488 },
      { 47.5, 594.211 },
      { 47.75, 595.513 },
      { 48, 592.043 },
      { 48.25, 585.32 },
      { 48.5, 595.946 },
      { 48.75, 574.26 },
      { 49, 560.814 },
      { 49.25, 568.838 },
      { 49.5, 570.139 },
      { 49.75, 548.886 },
      { 50, 538.694 },
      { 50.25, 550.405 },
      { 50.5, 552.356 },
      { 50.75, 523.513 },
      { 51, 537.393 },
      { 51.25, 527.417 },
      { 51.5, 534.79 },
      { 51.75, 532.622 },
      { 52, 540.646 },
      { 52.25, 512.019 },
      { 52.5, 520.043 },
      { 52.75, 509.417 },
      { 53, 501.393 },
      { 53.25, 502.26 },
      { 53.5, 501.827 },
      { 53.75, 481.224 },
      { 54, 503.345 },
      { 54.25, 508.766 },
      { 54.5, 472.55 },
      { 54.75, 501.393 },
      { 55, 493.369 },
      { 55.25, 459.972 },
      { 55.5, 475.803 },
      { 55.75, 471.682 },
      { 56, 465.827 },
      { 56.25, 456.285 },
      { 56.5, 470.381 },
      { 56.75, 453.466 },
      { 57, 456.936 },
      { 57.25, 451.948 },
      { 57.5, 463.658 },
      { 57.75, 433.08 },
      { 58, 438.936 },
      { 58.25, 427.008 },
      { 58.5, 444.791 },
      { 58.75, 443.056 },
      { 59, 436.116 },
      { 59.25, 444.574 },
      { 59.5, 427.659 },
      { 59.75, 415.297 },
      { 60, 419.418 },
      { 60.25, 420.068 },
      { 60.5, 413.996 },
      { 60.75, 416.382 },
      { 61, 404.237 },
      { 61.25, 417.466 },
      { 61.5, 409.876 },
      { 61.75, 400.551 },
      { 62, 406.406 },
      { 62.25, 401.418 },
      { 62.5, 394.912 },
      { 62.75, 395.996 },
      { 63, 397.081 },
      { 63.25, 401.201 },
      { 63.5, 393.611 },
      { 63.75, 378.43 },
      { 64, 386.021 },
      { 64.25, 378.43 },
      { 64.5, 380.599 },
      { 64.75, 370.406 },
      { 65, 375.828 },
      { 65.25, 361.732 },
      { 65.5, 362.165 },
      { 65.75, 371.707 },
      { 66, 371.491 },
      { 66.25, 365.852 },
      { 66.5, 367.587 },
      { 66.75, 356.961 },
      { 67, 350.671 },
      { 67.25, 351.973 },
      { 67.5, 348.503 },
      { 67.75, 339.178 },
      { 68, 339.611 },
      { 68.25, 332.021 },
      { 68.5, 328.768 },
      { 68.75, 338.744 },
      { 69, 338.31 },
      { 69.25, 325.515 },
      { 69.5, 346.117 },
      { 69.75, 332.888 },
      { 70, 326.599 },
      { 70.25, 321.828 },
      { 70.5, 319.009 },
      { 70.75, 313.371 },
      { 71, 326.383 },
      { 71.25, 332.672 },
      { 71.5, 312.286 },
      { 71.75, 309.684 },
      { 72, 332.021 },
      { 72.25, 323.997 },
      { 72.5, 316.624 },
      { 72.75, 322.696 },
      { 73, 303.395 },
      { 73.25, 291.684 },
      { 73.5, 301.009 },
      { 73.75, 305.997 },
      { 74, 314.238 },
      { 74.25, 302.527 },
      { 74.5, 298.624 },
      { 74.75, 310.768 },
      { 75, 293.636 },
      { 75.25, 303.612 },
      { 75.5, 294.72 },
      { 75.75, 286.913 },
      { 76, 285.178 },
      { 76.25, 275.636 },
      { 76.5, 296.021 },
      { 76.75, 283.009 },
      { 77, 273.034 },
      { 77.25, 293.419 },
      { 77.5, 273.467 },
      { 77.75, 280.407 },
      { 78, 274.118 },
      { 78.25, 268.696 },
      { 78.5, 273.467 },
      { 78.75, 268.696 },
      { 79, 279.54 },
      { 79.25, 266.961 },
      { 79.5, 257.853 },
      { 79.75, 248.745 },
      { 80, 268.046 },
      { 80.25, 252.648 },
      { 80.5, 263.708 },
      { 80.75, 260.239 },
      { 81, 250.696 },
      { 81.25, 265.877 },
      { 81.5, 254.6 },
      { 81.75, 245.709 },
      { 82, 243.54 },
      { 82.25, 246.142 },
      { 82.5, 253.299 },
      { 82.75, 257.636 },
      { 83, 236.6 },
      { 83.25, 245.275 },
      { 83.5, 237.251 },
      { 83.75, 236.6 },
      { 84, 235.95 },
      { 84.25, 251.13 },
      { 84.5, 227.275 },
      { 84.75, 245.709 },
      { 85, 230.745 },
      { 85.25, 236.6 },
      { 85.5, 228.359 },
      { 85.75, 238.118 },
      { 86, 228.359 },
      { 86.25, 220.335 },
      { 86.5, 230.528 },
      { 86.75, 211.661 },
      { 87, 228.359 },
      { 87.25, 217.516 },
      { 87.5, 219.685 },
      { 87.75, 222.07 },
      { 88, 223.588 },
      { 88.25, 222.721 },
      { 88.5, 220.986 },
      { 88.75, 214.697 },
      { 89, 227.058 },
      { 89.25, 213.179 },
      { 89.5, 214.263 },
      { 89.75, 217.082 },
      { 90, 220.552 },
      { 90.25, 209.275 },
      { 90.5, 203.203 },
      { 90.75, 203.42 },
      { 91, 217.516 },
      { 91.25, 187.589 },
      { 91.5, 196.263 },
      { 91.75, 208.408 },
      { 92, 197.131 },
      { 92.25, 207.974 },
      { 92.5, 194.311 },
      { 92.75, 197.564 },
      { 93, 206.022 },
      { 93.25, 188.456 },
      { 93.5, 184.986 },
      { 93.75, 196.263 },
      { 94, 193.878 },
      { 94.25, 192.793 },
      { 94.5, 188.673 },
      { 94.75, 185.42 },
      { 95, 194.095 },
      { 95.25, 194.095 },
      { 95.5, 191.926 },
      { 95.75, 197.348 },
      { 96, 187.589 },
      { 96.25, 189.757 },
      { 96.5, 181.733 },
      { 96.75, 204.287 },
      { 97, 189.54 },
      { 97.25, 176.962 },
      { 97.5, 179.348 },
      { 97.75, 181.3 },
      { 98, 178.263 },
      { 98.25, 171.324 },
      { 98.5, 174.36 },
      { 98.75, 176.962 },
      { 99, 172.625 },
      { 99.25, 173.276 },
      { 99.5, 157.444 },
      { 99.75, 174.36 },
      { 100, 177.396 },
      { 100.25, 172.191 },
      { 100.5, 160.264 },
      { 100.75, 168.938 },
      { 101, 165.685 },
      { 101.25, 168.071 },
      { 101.5, 166.986 },
      { 101.75, 157.011 },
      { 102, 169.155 },
      { 102.25, 168.504 },
      { 102.5, 169.806 },
      { 102.75, 157.444 },
      { 103, 155.276 },
      { 103.25, 165.035 },
      { 103.5, 169.372 },
      { 103.75, 148.119 },
      { 104, 153.974 },
      { 104.25, 172.408 },
      { 104.5, 163.733 },
      { 104.75, 160.697 },
      { 105, 155.059 },
      { 105.25, 173.276 },
      { 105.5, 148.553 },
      { 105.75, 151.372 },
      { 106, 156.36 },
      { 106.25, 154.191 },
      { 106.5, 148.77 },
      { 106.75, 164.601 },
      { 107, 156.143 },
      { 107.25, 143.782 },
      { 107.5, 151.372 },
      { 107.75, 151.155 },
      { 108, 149.637 },
      { 108.25, 144.216 },
      { 108.5, 161.998 },
      { 108.75, 139.661 },
      { 109, 134.89 },
      { 109.25, 130.987 },
      { 109.5, 144.866 },
      { 109.75, 154.842 },
      { 110, 142.047 },
      { 110.25, 142.697 },
      { 110.5, 144.649 },
      { 110.75, 138.794 },
      { 111, 139.228 },
      { 111.25, 134.24 },
      { 111.5, 140.746 },
      { 111.75, 132.939 },
      { 112, 135.758 },
      { 112.25, 133.589 },
      { 112.5, 133.372 },
      { 112.75, 125.348 },
      { 113, 128.601 },
      { 113.25, 120.577 },
      { 113.5, 122.963 },
      { 113.75, 136.408 },
      { 114, 132.071 },
      { 114.25, 130.336 },
      { 114.5, 123.613 },
      { 114.75, 126.216 },
      { 115, 135.758 },
      { 115.25, 128.384 },
      { 115.5, 136.408 },
      { 115.75, 138.36 },
      { 116, 133.372 },
      { 116.25, 132.288 },
      { 116.5, 128.167 },
      { 116.75, 121.878 },
      { 117, 140.529 },
      { 117.25, 127.3 },
      { 117.5, 126.866 },
      { 117.75, 125.565 },
      { 118, 119.059 },
      { 118.25, 114.939 },
      { 118.5, 123.613 },
      { 118.75, 118.842 },
      { 119, 112.987 },
      { 119.25, 128.384 },
      { 119.5, 122.746 },
      { 119.75, 121.662 },
      { 120, 118.842 },
      { 120.25, 119.493 },
      { 120.5, 116.674 },
      { 120.75, 113.638 },
      { 121, 115.156 },
      { 121.25, 116.89 },
      { 121.5, 125.348 },
      { 121.75, 118.409 },
      { 122, 124.698 },
      { 122.25, 111.035 },
      { 122.5, 111.035 },
      { 122.75, 104.312 },
      { 123, 112.77 },
      { 123.25, 117.107 },
      { 123.5, 109.3 },
      { 123.75, 109.3 },
      { 124, 104.529 },
      { 124.25, 112.553 },
      { 124.5, 109.517 },
      { 124.75, 107.999 },
      { 125, 106.047 },
      { 125.25, 106.698 },
      { 125.5, 108.65 },
      { 125.75, 102.794 },
      { 126, 108.866 },
      { 126.25, 100.192 },
      { 126.5, 107.782 },
      { 126.75, 99.975 },
      { 127, 107.565 },
      { 127.25, 100.626 },
      { 127.5, 99.5412 },
      { 127.75, 99.975 },
      { 128, 107.999 },
      { 128.25, 92.8184 },
      { 128.5, 103.662 },
      { 128.75, 108.65 },
      { 129, 99.3244 },
      { 129.25, 99.7581 },
      { 129.5, 98.6738 },
      { 129.75, 99.5412 },
      { 130, 86.0956 },
      { 130.25, 93.469 },
      { 130.5, 94.5533 },
      { 130.75, 94.9871 },
      { 131, 93.2521 },
      { 131.25, 95.6377 },
      { 131.5, 100.842 },
      { 131.75, 91.951 },
      { 132, 97.3726 },
      { 132.25, 95.6377 },
      { 132.5, 93.2521 },
      { 132.75, 98.6738 },
      { 133, 102.144 },
      { 133.25, 99.975 },
      { 133.5, 94.3365 },
      { 133.75, 101.493 },
      { 134, 93.9027 },
      { 134.25, 93.469 },
      { 134.5, 92.1678 },
      { 134.75, 87.8305 },
      { 135, 95.2039 },
      { 135.25, 87.3968 },
      { 135.5, 96.5051 },
      { 135.75, 82.4089 },
      { 136, 90.216 },
      { 136.25, 80.674 },
      { 136.5, 87.1799 },
      { 136.75, 84.5775 },
      { 137, 91.5172 },
      { 137.25, 77.6378 },
      { 137.5, 86.7462 },
      { 137.75, 80.674 },
      { 138, 93.6859 },
      { 138.25, 84.7944 },
      { 138.5, 86.0956 },
      { 138.75, 80.0234 },
      { 139, 85.8787 },
      { 139.25, 81.9751 },
      { 139.5, 86.7462 },
      { 139.75, 83.9269 },
      { 140, 80.2402 },
      { 140.25, 86.0956 },
      { 140.5, 83.4932 },
      { 140.75, 81.3245 },
      { 141, 74.8186 },
      { 141.25, 82.6257 },
      { 141.5, 79.8065 },
      { 141.75, 85.445 },
      { 142, 83.2763 },
      { 142.25, 84.3607 },
      { 142.5, 85.8787 },
      { 142.75, 73.5174 },
      { 143, 78.5053 },
      { 143.25, 77.6378 },
      { 143.5, 73.5174 },
      { 143.75, 73.3005 },
      { 144, 70.0475 },
      { 144.25, 78.2884 },
      { 144.5, 78.7222 },
      { 144.75, 79.1559 },
      { 145, 82.192 },
      { 145.25, 80.674 },
      { 145.5, 78.2884 },
      { 145.75, 81.3245 },
      { 146, 71.7825 },
      { 146.25, 73.9511 },
      { 146.5, 70.2644 },
      { 146.75, 76.7704 },
      { 147, 70.2644 },
      { 147.25, 70.0475 },
      { 147.5, 74.3849 },
      { 147.75, 73.5174 },
      { 148, 70.0475 },
      { 148.25, 70.4813 },
      { 148.5, 74.168 },
      { 148.75, 73.5174 },
      { 149, 75.4692 },
      { 149.25, 63.5416 },
      { 149.5, 78.0716 },
      { 149.75, 69.3969 },
      { 150, 71.1319 },
      { 150.25, 69.1801 },
      { 150.5, 68.3126 },
      { 150.75, 69.1801 },
      { 151, 68.3126 },
      { 151.25, 75.0354 },
      { 151.5, 74.8186 },
      { 151.75, 66.5777 },
      { 152, 74.168 },
      { 152.25, 64.1922 },
      { 152.5, 68.5295 },
      { 152.75, 70.0475 },
      { 153, 61.5898 },
      { 153.25, 61.1561 },
      { 153.5, 69.6138 },
      { 153.75, 63.5416 },
      { 154, 69.1801 },
      { 154.25, 63.3247 },
      { 154.5, 58.3368 },
      { 154.75, 66.5777 },
      { 155, 58.1199 },
      { 155.25, 69.8307 },
      { 155.5, 66.5777 },
      { 155.75, 62.4573 },
      { 156, 60.9392 },
      { 156.25, 58.3368 },
      { 156.5, 65.2765 },
      { 156.75, 62.0235 },
      { 157, 64.1922 },
      { 157.25, 66.144 },
      { 157.5, 59.4211 },
      { 157.75, 60.7223 },
      { 158, 64.6259 },
      { 158.25, 60.2886 },
      { 158.5, 53.132 },
      { 158.75, 62.6741 },
      { 159, 62.0235 },
      { 159.25, 61.5898 },
      { 159.5, 58.1199 },
      { 159.75, 54.6501 },
      { 160, 55.3007 }
    };
    static const std::vector< std::pair<double, double> > pt_dxsecNNLOdpt_pairs={
      { 0, 331.9602563 },
      { 0.5, 1117.590258 },
      { 1, 1738.734438 },
      { 1.5, 2222.531235 },
      { 2, 2640.006989 },
      { 2.5, 2953.529409 },
      { 3, 3162.444615 },
      { 3.5, 3351.640026 },
      { 4, 3455.542501 },
      { 4.5, 3504.493982 },
      { 5, 3490.277975 },
      { 5.5, 3449.474063 },
      { 6, 3451.248949 },
      { 6.5, 3429.96324 },
      { 7, 3307.316858 },
      { 7.5, 3300.940157 },
      { 8, 3241.882749 },
      { 8.5, 3158.449497 },
      { 9, 3088.201043 },
      { 9.5, 3008.605432 },
      { 10, 2897.269689 },
      { 10.5, 2865.868828 },
      { 11, 2770.77995 },
      { 11.5, 2737.444347 },
      { 12, 2611.973748 },
      { 12.5, 2582.767819 },
      { 13, 2471.970593 },
      { 13.5, 2443.064261 },
      { 14, 2346.531606 },
      { 14.5, 2304.248805 },
      { 15, 2247.421029 },
      { 15.5, 2201.991931 },
      { 16, 2133.299156 },
      { 16.5, 2105.484762 },
      { 17, 2016.001925 },
      { 17.5, 1961.757554 },
      { 18, 1945.189873 },
      { 18.5, 1879.393466 },
      { 19, 1839.339836 },
      { 19.5, 1800.446994 },
      { 20, 1785.844661 },
      { 20.5, 1736.628059 },
      { 21, 1679.374742 },
      { 21.5, 1662.212233 },
      { 22, 1552.145025 },
      { 22.5, 1560.465341 },
      { 23, 1516.033931 },
      { 23.5, 1506.927572 },
      { 24, 1463.230887 },
      { 24.5, 1437.145869 },
      { 25, 1380.416972 },
      { 25.5, 1371.124634 },
      { 26, 1347.796577 },
      { 26.5, 1286.524407 },
      { 27, 1302.758875 },
      { 27.5, 1249.383912 },
      { 28, 1218.473335 },
      { 28.5, 1211.911342 },
      { 29, 1173.290681 },
      { 29.5, 1186.190135 },
      { 30, 1132.221675 },
      { 30.5, 1133.023374 },
      { 31, 1079.925895 },
      { 31.5, 1090.730029 },
      { 32, 1045.88806 },
      { 32.5, 1043.46432 },
      { 33, 1020.214151 },
      { 33.5, 1004.571223 },
      { 34, 987.9584292 },
      { 34.5, 958.545377 },
      { 35, 951.9550107 },
      { 35.5, 904.636139 },
      { 36, 907.8855895 },
      { 36.5, 911.4095919 },
      { 37, 891.8829468 },
      { 37.5, 867.4698975 },
      { 38, 852.439286 },
      { 38.5, 828.2951813 },
      { 39, 830.7882989 },
      { 39.5, 803.0705462 },
      { 40, 819.6064208 },
      { 40.5, 795.7241009 },
      { 41, 777.7821184 },
      { 41.5, 745.9709861 },
      { 42, 740.9047453 },
      { 42.5, 731.3895492 },
      { 43, 726.813551 },
      { 43.5, 716.2491251 },
      { 44, 705.9866554 },
      { 44.5, 696.4779463 },
      { 45, 677.8433247 },
      { 45.5, 663.7069801 },
      { 46, 657.6563623 },
      { 46.5, 659.1739508 },
      { 47, 650.824477 },
      { 47.5, 643.3205692 },
      { 48, 622.6517715 },
      { 48.5, 634.8963463 },
      { 49, 593.7779143 },
      { 49.5, 593.9048574 },
      { 50, 594.7065423 },
      { 50.5, 593.7883171 },
      { 51, 576.9840459 },
      { 51.5, 548.9485728 },
      { 52, 563.8800473 },
      { 52.5, 560.3630958 },
      { 53, 536.7943493 },
      { 53.5, 531.5683406 },
      { 54, 527.5839033 },
      { 54.5, 514.686876 },
      { 55, 506.2202953 },
      { 55.5, 506.2758943 },
      { 56, 495.4988895 },
      { 56.5, 493.1871873 },
      { 57, 475.3327516 },
      { 57.5, 484.791227 },
      { 58, 480.8655887 },
      { 58.5, 463.5925982 },
      { 59, 454.9163807 },
      { 59.5, 460.483649 },
      { 60, 452.7712134 },
      { 60.5, 442.8782226 },
      { 61, 435.6730765 },
      { 61.5, 432.6667751 },
      { 62, 435.8572242 },
      { 62.5, 438.0517959 },
      { 63, 409.4672323 },
      { 63.5, 414.6585194 },
      { 64, 405.7634023 },
      { 64.5, 409.1415664 },
      { 65, 386.1377399 },
      { 65.5, 379.9937186 },
      { 66, 380.2695403 },
      { 66.5, 391.6176328 },
      { 67, 376.6517415 },
      { 67.5, 389.9505187 },
      { 68, 374.7354091 },
      { 68.5, 365.7520355 },
      { 69, 371.7244166 },
      { 69.5, 361.0921734 },
      { 70, 355.9083296 },
      { 70.5, 352.2921666 },
      { 71, 345.9011056 },
      { 71.5, 347.1494816 },
      { 72, 332.7967319 },
      { 72.5, 336.0985856 },
      { 73, 330.2023002 },
      { 73.5, 325.8162227 },
      { 74, 325.6835056 },
      { 74.5, 314.1410783 },
      { 75, 319.5144392 },
      { 75.5, 316.8454527 },
      { 76, 308.9411957 },
      { 76.5, 304.228512 },
      { 77, 300.6386208 },
      { 77.5, 301.9525774 },
      { 78, 294.2451398 },
      { 78.5, 291.1265278 },
      { 79, 291.2548693 },
      { 79.5, 276.1785952 },
      { 80, 282.8071104 },
      { 80.5, 273.3365455 },
      { 81, 280.0562355 },
      { 81.5, 280.3566502 },
      { 82, 265.7827695 },
      { 82.5, 269.303968 },
      { 83, 264.7948752 },
      { 83.5, 265.6018388 },
      { 84, 255.3406059 },
      { 84.5, 256.2887104 },
      { 85, 255.9091427 },
      { 85.5, 249.824354 },
      { 86, 252.6433559 },
      { 86.5, 248.25833 },
      { 87, 246.9185053 },
      { 87.5, 241.5644247 },
      { 88, 232.6728807 },
      { 88.5, 232.1684382 },
      { 89, 231.2613691 },
      { 89.5, 231.2709316 },
      { 90, 229.3323553 },
      { 90.5, 232.7395626 },
      { 91, 223.6764109 },
      { 91.5, 220.8760658 },
      { 92, 218.4158524 },
      { 92.5, 220.2332734 },
      { 93, 215.2114877 },
      { 93.5, 210.5491461 },
      { 94, 213.6430052 },
      { 94.5, 208.166838 },
      { 95, 204.0367218 },
      { 95.5, 203.4701437 },
      { 96, 211.338926 },
      { 96.5, 200.5651682 },
      { 97, 206.0159373 },
      { 97.5, 196.5705046 },
      { 98, 198.8846595 },
      { 98.5, 188.2281785 },
      { 99, 187.5087476 },
      { 99.5, 189.428696 },
      { 100, 184.3332451 },
      { 100.5, 186.8099934 },
      { 101, 191.1114431 },
      { 101.5, 181.0966328 },
      { 102, 178.5691165 },
      { 102.5, 179.5268822 },
      { 103, 178.3213297 },
      { 103.5, 176.5504146 },
      { 104, 169.8643276 },
      { 104.5, 170.8855693 },
      { 105, 167.6187975 },
      { 105.5, 170.6403151 },
      { 106, 163.6521337 },
      { 106.5, 165.202072 },
      { 107, 159.467381 },
      { 107.5, 165.382712 },
      { 108, 158.3128115 },
      { 108.5, 162.632962 },
      { 109, 154.0904964 },
      { 109.5, 154.5105941 },
      { 110, 159.8682016 },
      { 110.5, 152.3336423 },
      { 111, 152.6221568 },
      { 111.5, 150.7317335 },
      { 112, 148.9943382 },
      { 112.5, 145.6835525 },
      { 113, 145.8546829 },
      { 113.5, 150.1240008 },
      { 114, 146.3182942 },
      { 114.5, 142.9952068 },
      { 115, 143.855825 },
      { 115.5, 136.9696783 },
      { 116, 134.6747552 },
      { 116.5, 136.9712392 },
      { 117, 137.1615279 },
      { 117.5, 137.6103856 },
      { 118, 134.2413627 },
      { 118.5, 133.6205511 },
      { 119, 131.9395775 },
      { 119.5, 130.1039286 },
      { 120, 124.6909816 },
      { 120.5, 130.1420114 },
      { 121, 127.7172745 },
      { 121.5, 125.4997691 },
      { 122, 122.7034049 },
      { 122.5, 129.9487712 },
      { 123, 118.3886958 },
      { 123.5, 125.5649357 },
      { 124, 114.5440108 },
      { 124.5, 119.5594312 },
      { 125, 117.2164433 },
      { 125.5, 116.2364649 },
      { 126, 115.5632215 },
      { 126.5, 118.9497639 },
      { 127, 108.3605815 },
      { 127.5, 117.354397 },
      { 128, 111.4806851 },
      { 128.5, 115.275908 },
      { 129, 109.6498895 },
      { 129.5, 105.1031515 },
      { 130, 111.1738569 },
      { 130.5, 106.8611631 },
      { 131, 103.4582836 },
      { 131.5, 103.6295521 },
      { 132, 101.8121979 },
      { 132.5, 103.9404602 },
      { 133, 99.61935382 },
      { 133.5, 102.2594146 },
      { 134, 101.3587389 },
      { 134.5, 97.28906038 },
      { 135, 97.0815531 },
      { 135.5, 102.1493734 },
      { 136, 93.96431347 },
      { 136.5, 93.27198321 },
      { 137, 99.15310367 },
      { 137.5, 97.48350742 },
      { 138, 90.68744537 },
      { 138.5, 94.98229139 },
      { 139, 91.40547119 },
      { 139.5, 90.28893042 },
      { 140, 91.2797631 },
      { 140.5, 90.78146086 },
      { 141, 89.19640962 },
      { 141.5, 85.08900605 },
      { 142, 87.44376674 },
      { 142.5, 84.68826926 },
      { 143, 90.34208826 },
      { 143.5, 85.00884669 },
      { 144, 83.9336824 },
      { 144.5, 83.45710486 },
      { 145, 83.76755432 },
      { 145.5, 84.86169258 },
      { 146, 80.11119577 },
      { 146.5, 80.56161775 },
      { 147, 84.23731214 },
      { 147.5, 79.08083965 },
      { 148, 78.07561659 },
      { 148.5, 81.05708982 },
      { 149, 80.44476812 },
      { 149.5, 77.05197272 },
      { 150, 78.23786804 },
      { 150.5, 78.02511071 },
      { 151, 78.65819269 },
      { 151.5, 74.85517865 },
      { 152, 72.93796124 },
      { 152.5, 77.06826913 },
      { 153, 70.47241811 },
      { 153.5, 72.23152224 },
      { 154, 73.75688605 },
      { 154.5, 71.77241995 },
      { 155, 69.55810054 },
      { 155.5, 71.98960313 },
      { 156, 71.19158015 },
      { 156.5, 68.5016609 },
      { 157, 69.86163507 },
      { 157.5, 67.64294277 },
      { 158, 64.99792302 },
      { 158.5, 71.56668763 },
      { 159, 65.30495345 },
      { 159.5, 66.989404 },
      { 160, 68.17937365 },
      { 160.5, 61.05959323 },
      { 161, 65.34243567 },
      { 161.5, 63.47116774 },
      { 162, 64.13697447 },
      { 162.5, 62.3625355 },
      { 163, 62.28654387 },
      { 163.5, 64.23481639 },
      { 164, 59.69351163 },
      { 164.5, 60.80314761 },
      { 165, 61.45746516 },
      { 165.5, 60.73968998 },
      { 166, 58.87603188 },
      { 166.5, 58.75745659 },
      { 167, 57.8645848 },
      { 167.5, 59.62984765 },
      { 168, 54.96638819 },
      { 168.5, 59.01550752 },
      { 169, 57.09235724 },
      { 169.5, 57.39119118 },
      { 170, 55.26390764 },
      { 170.5, 53.35053736 },
      { 171, 57.58070035 },
      { 171.5, 54.02739934 },
      { 172, 51.99488982 },
      { 172.5, 55.21001451 },
      { 173, 51.92859718 },
      { 173.5, 53.45994381 },
      { 174, 50.90274533 },
      { 174.5, 54.25885546 },
      { 175, 53.5827177 },
      { 175.5, 51.70769348 },
      { 176, 50.23033783 },
      { 176.5, 52.32172912 },
      { 177, 49.26492424 },
      { 177.5, 50.09992934 },
      { 178, 50.40294117 },
      { 178.5, 48.33734318 },
      { 179, 49.63186068 },
      { 179.5, 51.23808463 },
      { 180, 47.57970571 },
      { 180.5, 49.80152953 },
      { 181, 45.21579814 },
      { 181.5, 44.82100395 },
      { 182, 48.02360526 },
      { 182.5, 46.40001689 },
      { 183, 46.55960165 },
      { 183.5, 45.22897328 },
      { 184, 43.62361642 },
      { 184.5, 44.3899678 },
      { 185, 45.2541453 },
      { 185.5, 43.15942637 },
      { 186, 46.23612616 },
      { 186.5, 41.29377901 },
      { 187, 46.95274665 },
      { 187.5, 43.74989024 },
      { 188, 41.44230073 },
      { 188.5, 42.41145979 },
      { 189, 41.45630624 },
      { 189.5, 43.86720945 },
      { 190, 41.99283331 },
      { 190.5, 42.23757946 },
      { 191, 41.58079138 },
      { 191.5, 38.62458013 },
      { 192, 39.27364945 },
      { 192.5, 39.92448032 },
      { 193, 39.2418059 },
      { 193.5, 39.37506694 },
      { 194, 37.47607762 },
      { 194.5, 39.66679112 },
      { 195, 41.17207782 },
      { 195.5, 33.3191844 },
      { 196, 39.56999763 },
      { 196.5, 38.05237556 },
      { 197, 39.22417399 },
      { 197.5, 38.44534692 },
      { 198, 37.76576374 },
      { 198.5, 34.18280842 },
      { 199, 35.89109891 },
      { 199.5, 37.3747482 },
      { 200, 37.55746553 },
      { 200.5, 34.44002625 },
      { 201, 35.08175381 },
      { 201.5, 35.13561772 },
      { 202, 33.630234 },
      { 202.5, 35.3710613 },
      { 203, 33.58359138 },
      { 203.5, 33.78407411 },
      { 204, 34.3875762 },
      { 204.5, 32.34539459 },
      { 205, 35.04992506 },
      { 205.5, 34.66975588 },
      { 206, 33.20886247 },
      { 206.5, 30.25330844 },
      { 207, 32.39913598 },
      { 207.5, 32.07307012 },
      { 208, 34.11011552 },
      { 208.5, 32.03199573 },
      { 209, 32.84675051 },
      { 209.5, 30.73465634 },
      { 210, 29.77658293 },
      { 210.5, 29.62035179 },
      { 211, 32.67482832 },
      { 211.5, 27.0754101 },
      { 212, 31.8829372 },
      { 212.5, 30.75812519 },
      { 213, 30.01553858 },
      { 213.5, 29.31640833 },
      { 214, 28.96358662 },
      { 214.5, 28.21227194 },
      { 215, 28.96601804 },
      { 215.5, 29.46316093 },
      { 216, 26.98272217 },
      { 216.5, 28.50125985 },
      { 217, 27.39370943 },
      { 217.5, 27.85853897 },
      { 218, 27.9703619 },
      { 218.5, 28.07322335 },
      { 219, 27.98994969 },
      { 219.5, 27.7066105 },
      { 220, 26.22118126 },
      { 220.5, 25.87562897 },
      { 221, 27.41026956 },
      { 221.5, 26.09378749 },
      { 222, 25.59814077 },
      { 222.5, 25.16858021 },
      { 223, 25.19395819 },
      { 223.5, 25.47208546 },
      { 224, 24.19288832 },
      { 224.5, 27.28260568 },
      { 225, 24.40102389 },
      { 225.5, 26.81693723 },
      { 226, 25.21532258 },
      { 226.5, 24.46981456 },
      { 227, 24.8846947 },
      { 227.5, 22.65468116 },
      { 228, 25.27938142 },
      { 228.5, 23.73978161 },
      { 229, 25.03108127 },
      { 229.5, 22.6129748 },
      { 230, 25.4794625 },
      { 230.5, 22.0759292 },
      { 231, 23.38426193 },
      { 231.5, 22.49902236 },
      { 232, 22.2563292 },
      { 232.5, 22.91363306 },
      { 233, 21.4726476 },
      { 233.5, 22.61938004 },
      { 234, 23.50001763 },
      { 234.5, 20.59458648 },
      { 235, 22.71171049 },
      { 235.5, 22.55538985 },
      { 236, 22.14083638 },
      { 236.5, 22.4549478 },
      { 237, 21.68832196 },
      { 237.5, 19.66260387 },
      { 238, 22.55658988 },
      { 238.5, 21.02270488 },
      { 239, 21.4663798 },
      { 239.5, 18.6182184 },
      { 240, 22.18308319 },
      { 240.5, 20.52326833 },
      { 241, 20.8409633 },
      { 241.5, 20.40410356 },
      { 242, 19.58391164 },
      { 242.5, 19.8685965 },
      { 243, 18.79418897 },
      { 243.5, 18.51114513 },
      { 244, 21.50732618 },
      { 244.5, 17.80957015 },
      { 245, 19.25934327 },
      { 245.5, 17.43162645 },
      { 246, 20.258629 },
      { 246.5, 19.83105745 },
      { 247, 17.05978506 },
      { 247.5, 19.37108364 },
      { 248, 17.95079683 },
      { 248.5, 17.76197961 },
      { 249, 20.1502296 },
      { 249.5, 17.47313264 },
      { 250, 17.57376314 },
      { 250.5, 17.45672445 },
      { 251, 16.88558319 },
      { 251.5, 17.7165494 },
      { 252, 17.99159979 },
      { 252.5, 16.91946229 },
      { 253, 17.54991505 },
      { 253.5, 17.88053744 },
      { 254, 16.7990931 },
      { 254.5, 17.15991401 },
      { 255, 16.6193968 },
      { 255.5, 15.34078217 },
      { 256, 16.26830158 },
      { 256.5, 16.42558501 },
      { 257, 16.60826204 },
      { 257.5, 16.64756899 },
      { 258, 16.72265701 },
      { 258.5, 15.59767905 },
      { 259, 17.2592605 },
      { 259.5, 16.70038732 },
      { 260, 15.67566251 },
      { 260.5, 16.04809769 },
      { 261, 15.54424158 },
      { 261.5, 15.63877945 },
      { 262, 14.94206573 },
      { 262.5, 15.90010199 },
      { 263, 15.11489687 },
      { 263.5, 12.95917165 },
      { 264, 15.19530197 },
      { 264.5, 15.30281326 },
      { 265, 13.79470682 },
      { 265.5, 15.88599678 },
      { 266, 14.86584408 },
      { 266.5, 15.09714183 },
      { 267, 15.30354097 },
      { 267.5, 13.07228752 },
      { 268, 13.56394627 },
      { 268.5, 15.01652838 },
      { 269, 14.3578879 },
      { 269.5, 13.6745812 },
      { 270, 14.4347401 },
      { 270.5, 14.02074687 },
      { 271, 13.82969969 },
      { 271.5, 14.04821425 },
      { 272, 13.46187346 },
      { 272.5, 14.26725783 },
      { 273, 13.22350172 },
      { 273.5, 11.96771875 },
      { 274, 13.13832762 },
      { 274.5, 13.86702657 },
      { 275, 13.30793118 },
      { 275.5, 13.2806892 },
      { 276, 12.35915054 },
      { 276.5, 14.22282217 },
      { 277, 11.01731486 },
      { 277.5, 12.80398717 },
      { 278, 13.92072888 },
      { 278.5, 12.66841064 },
      { 279, 11.09301378 },
      { 279.5, 13.08761662 },
      { 280, 12.04301238 },
      { 280.5, 11.28969313 },
      { 281, 12.6535978 },
      { 281.5, 12.35555674 },
      { 282, 11.93012674 },
      { 282.5, 13.10831552 },
      { 283, 11.41728225 },
      { 283.5, 11.86615319 },
      { 284, 11.52921874 },
      { 284.5, 12.09869347 },
      { 285, 11.49804203 },
      { 285.5, 12.0893765 },
      { 286, 10.60614202 },
      { 286.5, 11.41898339 },
      { 287, 11.74372342 },
      { 287.5, 10.69280343 },
      { 288, 11.70362151 },
      { 288.5, 10.4635964 },
      { 289, 11.30654589 },
      { 289.5, 12.26795226 },
      { 290, 10.28689614 },
      { 290.5, 10.87035243 },
      { 291, 10.06085623 },
      { 291.5, 11.27156783 },
      { 292, 10.93141164 },
      { 292.5, 11.49910234 },
      { 293, 10.23059917 },
      { 293.5, 9.786919417 },
      { 294, 11.05616038 },
      { 294.5, 9.539064851 },
      { 295, 10.81409248 },
      { 295.5, 9.795672287 },
      { 296, 10.6532852 },
      { 296.5, 9.641810724 },
      { 297, 10.59028814 },
      { 297.5, 9.948368661 },
      { 298, 10.44407452 },
      { 298.5, 9.579849525 },
      { 299, 10.08495936 },
      { 299.5, 10.33242378 },
      { 300, 8.877652071 },
      { 300.5, 9.668049552 },
      { 301, 9.398022592 },
      { 301.5, 9.90052635 },
      { 302, 10.0962613 },
      { 302.5, 8.696190309 },
      { 303, 9.038353673 },
      { 303.5, 9.870079581 },
      { 304, 9.14137181 },
      { 304.5, 9.41813483 },
      { 305, 9.070409261 },
      { 305.5, 8.806246805 },
      { 306, 7.910919334 },
      { 306.5, 9.521082688 },
      { 307, 8.777676266 },
      { 307.5, 8.872486258 },
      { 308, 8.541981823 },
      { 308.5, 8.981840941 },
      { 309, 8.375054476 },
      { 309.5, 8.541136909 },
      { 310, 8.920035918 },
      { 310.5, 7.490986963 },
      { 311, 8.26457423 },
      { 311.5, 9.023275999 },
      { 312, 7.97807303 },
      { 312.5, 8.490164934 },
      { 313, 8.309267713 },
      { 313.5, 8.658685493 },
      { 314, 7.780459952 },
      { 314.5, 8.347169702 },
      { 315, 7.846474647 },
      { 315.5, 8.360673121 },
      { 316, 7.912743496 },
      { 316.5, 8.152017593 },
      { 317, 7.899900168 },
      { 317.5, 7.878361946 },
      { 318, 8.456637527 },
      { 318.5, 8.300046042 },
      { 319, 7.72256727 },
      { 319.5, 8.090416841 },
      { 320, 7.18302993 },
      { 320.5, 7.502388454 },
      { 321, 8.12688083 },
      { 321.5, 7.424445257 },
      { 322, 7.490055084 },
      { 322.5, 7.706501487 },
      { 323, 6.747436319 },
      { 323.5, 7.467250116 },
      { 324, 8.021837424 },
      { 324.5, 7.71075903 },
      { 325, 7.377864008 },
      { 325.5, 7.273606141 },
      { 326, 7.264875124 },
      { 326.5, 6.67289379 },
      { 327, 8.277227165 },
      { 327.5, 6.021469976 },
      { 328, 7.762743968 },
      { 328.5, 6.910580482 },
      { 329, 7.081258049 },
      { 329.5, 7.190129968 },
      { 330, 6.920828702 },
      { 330.5, 6.748364186 },
      { 331, 6.813967563 },
      { 331.5, 5.918492478 },
      { 332, 7.182640752 },
      { 332.5, 6.13902856 },
      { 333, 7.165993854 },
      { 333.5, 6.725809741 },
      { 334, 6.888568703 },
      { 334.5, 6.472682693 },
      { 335, 6.540470672 },
      { 335.5, 6.488470024 },
      { 336, 6.057953873 },
      { 336.5, 5.37699942 },
      { 337, 7.020390466 },
      { 337.5, 6.617515398 },
      { 338, 6.266290436 },
      { 338.5, 6.383698705 },
      { 339, 6.007552422 },
      { 339.5, 6.866168008 },
      { 340, 6.059137993 },
      { 340.5, 5.575199198 },
      { 341, 6.217058181 },
      { 341.5, 6.499926475 },
      { 342, 5.772766048 },
      { 342.5, 6.539304561 },
      { 343, 5.633555778 },
      { 343.5, 6.398630416 },
      { 344, 5.79424457 },
      { 344.5, 6.195762727 },
      { 345, 4.957967005 },
      { 345.5, 5.958903754 },
      { 346, 5.657154292 },
      { 346.5, 6.355482729 },
      { 347, 5.851810661 },
      { 347.5, 5.804461618 },
      { 348, 5.665875426 },
      { 348.5, 6.155441674 },
      { 349, 5.444231189 },
      { 349.5, 5.111854637 },
      { 350, 5.462322062 },
      { 350.5, 5.769223339 },
      { 351, 5.118319714 },
      { 351.5, 4.759531015 },
      { 352, 5.313627803 },
      { 352.5, 5.569523048 },
      { 353, 5.235467945 },
      { 353.5, 5.239497258 },
      { 354, 4.8829031 },
      { 354.5, 5.410042086 },
      { 355, 4.958853636 },
      { 355.5, 5.779437199 },
      { 356, 4.799217596 },
      { 356.5, 5.394285933 },
      { 357, 4.798505142 },
      { 357.5, 4.799071386 },
      { 358, 4.644004168 },
      { 358.5, 5.563502605 },
      { 359, 5.531379574 },
      { 359.5, 4.62689707 },
      { 360, 5.175057053 },
      { 360.5, 4.982841228 },
      { 361, 4.687947507 },
      { 361.5, 4.783465555 },
      { 362, 4.818659506 },
      { 362.5, 5.252504052 },
      { 363, 4.86784007 },
      { 363.5, 4.726209705 },
      { 364, 4.489946616 },
      { 364.5, 4.470090507 },
      { 365, 4.74242518 },
      { 365.5, 5.230153793 },
      { 366, 4.661608693 },
      { 366.5, 3.955901582 },
      { 367, 4.591712315 },
      { 367.5, 5.165179814 },
      { 368, 4.607181119 },
      { 368.5, 4.887470187 },
      { 369, 4.325120426 },
      { 369.5, 4.473948056 },
      { 370, 4.568269765 },
      { 370.5, 4.202299045 },
      { 371, 4.707178275 },
      { 371.5, 4.853345262 },
      { 372, 4.606371874 },
      { 372.5, 3.951349602 },
      { 373, 4.011030745 },
      { 373.5, 4.996891096 },
      { 374, 3.567405479 },
      { 374.5, 4.720356953 },
      { 375, 3.894418766 },
      { 375.5, 4.11707896 },
      { 376, 4.176612354 },
      { 376.5, 3.873885874 },
      { 377, 4.7769409 },
      { 377.5, 4.407887559 },
      { 378, 3.74812924 },
      { 378.5, 3.937125761 },
      { 379, 4.111299253 },
      { 379.5, 4.050011684 },
      { 380, 4.225864357 },
      { 380.5, 3.929530833 },
      { 381, 3.832455298 },
      { 381.5, 3.932744427 },
      { 382, 3.721823921 },
      { 382.5, 4.589040577 },
      { 383, 3.463319187 },
      { 383.5, 3.777878897 },
      { 384, 4.650705734 },
      { 384.5, 3.369113774 },
      { 385, 3.898406172 },
      { 385.5, 3.779738163 },
      { 386, 3.452829081 },
      { 386.5, 3.830938596 },
      { 387, 4.104243178 },
      { 387.5, 3.997204765 },
      { 388, 3.528449435 },
      { 388.5, 3.623798039 },
      { 389, 3.817199091 },
      { 389.5, 3.321313419 },
      { 390, 3.462564832 },
      { 390.5, 3.827582961 },
      { 391, 3.433466027 },
      { 391.5, 3.655080653 },
      { 392, 3.847231233 },
      { 392.5, 3.01223642 },
      { 393, 3.86158622 },
      { 393.5, 3.459610815 },
      { 394, 3.932488891 },
      { 394.5, 3.536793801 },
      { 395, 3.259008723 },
      { 395.5, 3.465793976 },
      { 396, 3.615279702 },
      { 396.5, 2.945956769 },
      { 397, 4.486627465 },
      { 397.5, 2.734900396 },
      { 398, 4.145509463 },
      { 398.5, 2.786616496 },
      { 399, 3.178672304 },
      { 399.5, 3.517879935 },
      { 400, 3.510035562 },
      { 400.5, 2.451214447 },
      { 401, 3.303078001 },
      { 401.5, 3.039027762 },
      { 402, 3.769217709 },
      { 402.5, 2.974467112 },
      { 403, 3.005104934 },
      { 403.5, 3.571784361 },
      { 404, 2.97664322 },
      { 404.5, 3.051637777 },
      { 405, 3.204078291 },
      { 405.5, 2.749746947 },
      { 406, 3.265329277 },
      { 406.5, 2.880134813 },
      { 407, 3.185038541 },
      { 407.5, 2.486752365 },
      { 408, 3.249357569 },
      { 408.5, 3.020702275 },
      { 409, 3.384186542 },
      { 409.5, 2.807514296 },
      { 410, 2.94552344 },
      { 410.5, 2.645226704 },
      { 411, 3.05055985 },
      { 411.5, 3.300364183 },
      { 412, 2.725787137 },
      { 412.5, 2.915219932 },
      { 413, 3.096320674 },
      { 413.5, 2.7191704 },
      { 414, 3.023544461 },
      { 414.5, 2.712038065 },
      { 415, 2.680135083 },
      { 415.5, 2.845705501 },
      { 416, 2.975733624 },
      { 416.5, 2.865021381 },
      { 417, 2.766235189 },
      { 417.5, 2.738876606 },
      { 418, 3.031974598 },
      { 418.5, 2.620321059 },
      { 419, 2.777474935 },
      { 419.5, 2.614024881 },
      { 420, 2.598986597 },
      { 420.5, 2.751124503 },
      { 421, 2.976707061 },
      { 421.5, 2.653525647 },
      { 422, 2.492064401 },
      { 422.5, 2.963705184 },
      { 423, 2.611103756 },
      { 423.5, 2.715358308 },
      { 424, 2.773416218 },
      { 424.5, 2.367970646 },
      { 425, 2.651273628 },
      { 425.5, 2.755585082 },
      { 426, 2.326344717 },
      { 426.5, 2.499758804 },
      { 427, 2.92606283 },
      { 427.5, 2.180253517 },
      { 428, 2.517975527 },
      { 428.5, 2.503741785 },
      { 429, 2.923958984 },
      { 429.5, 2.464109623 },
      { 430, 2.337059624 },
      { 430.5, 2.241649628 },
      { 431, 2.498671527 },
      { 431.5, 2.659519448 },
      { 432, 1.803987988 },
      { 432.5, 2.332071474 },
      { 433, 2.316021578 },
      { 433.5, 2.463784018 },
      { 434, 2.369128307 },
      { 434.5, 2.459453846 },
      { 435, 2.351119205 },
      { 435.5, 3.048871748 },
      { 436, 1.950757119 },
      { 436.5, 2.54154598 },
      { 437, 2.140207456 },
      { 437.5, 2.007453033 },
      { 438, 1.835732421 },
      { 438.5, 2.50120117 },
      { 439, 2.70005952 },
      { 439.5, 2.005785505 },
      { 440, 2.407113404 },
      { 440.5, 2.360882262 },
      { 441, 2.120638837 },
      { 441.5, 2.52292004 },
      { 442, 1.514317841 },
      { 442.5, 2.388038489 },
      { 443, 2.442219909 },
      { 443.5, 1.762797585 },
      { 444, 2.322377979 },
      { 444.5, 2.583706486 },
      { 445, 2.056262068 },
      { 445.5, 2.206232778 },
      { 446, 2.026362709 },
      { 446.5, 2.186483687 },
      { 447, 2.065618029 },
      { 447.5, 1.945473175 },
      { 448, 2.286681609 },
      { 448.5, 2.243311279 },
      { 449, 1.574968529 },
      { 449.5, 2.16718691 },
      { 450, 1.976306512 },
      { 450.5, 2.476447989 },
      { 451, 1.680074982 },
      { 451.5, 2.236959596 },
      { 452, 2.006923661 },
      { 452.5, 2.337738626 },
      { 453, 2.048349806 },
      { 453.5, 1.775985672 },
      { 454, 1.948433039 },
      { 454.5, 1.917091026 },
      { 455, 2.329615094 },
      { 455.5, 2.096179435 },
      { 456, 1.900684821 },
      { 456.5, 1.838937008 },
      { 457, 2.172344739 },
      { 457.5, 1.614485182 },
      { 458, 1.933086306 },
      { 458.5, 1.908250413 },
      { 459, 2.031159803 },
      { 459.5, 1.804843113 },
      { 460, 2.002081279 },
      { 460.5, 2.301135354 },
      { 461, 1.302567701 },
      { 461.5, 1.814962321 },
      { 462, 1.72224273 },
      { 462.5, 1.811665676 },
      { 463, 1.904246746 },
      { 463.5, 1.756513355 },
      { 464, 1.62148116 },
      { 464.5, 1.888130956 },
      { 465, 1.760499817 },
      { 465.5, 1.544405574 },
      { 466, 2.046656462 },
      { 466.5, 1.828846093 },
      { 467, 1.811160455 },
      { 467.5, 1.469017408 },
      { 468, 1.877346697 },
      { 468.5, 1.661957532 },
      { 469, 1.801000369 },
      { 469.5, 2.053914408 },
      { 470, 1.61480229 },
      { 470.5, 1.528982421 },
      { 471, 1.965634414 },
      { 471.5, 1.700052017 },
      { 472, 1.601171096 },
      { 472.5, 1.775299669 },
      { 473, 1.732340821 },
      { 473.5, 1.648401948 },
      { 474, 1.342734463 },
      { 474.5, 1.789183371 },
      { 475, 1.602301943 },
      { 475.5, 1.855727089 },
      { 476, 1.432928963 },
      { 476.5, 1.491212854 },
      { 477, 1.55803405 },
      { 477.5, 1.797170934 },
      { 478, 1.805144836 },
      { 478.5, 1.447580549 },
      { 479, 1.703277495 },
      { 479.5, 1.263534215 },
      { 480, 1.301398779 },
      { 480.5, 1.826892165 },
      { 481, 1.673669595 },
      { 481.5, 1.69558126 },
      { 482, 1.608382234 },
      { 482.5, 1.311106447 },
      { 483, 1.169878527 },
      { 483.5, 1.701606855 },
      { 484, 1.386635885 },
      { 484.5, 1.586182363 },
      { 485, 1.524448447 },
      { 485.5, 1.326246476 },
      { 486, 1.255430653 },
      { 486.5, 1.675815393 },
      { 487, 1.810286663 },
      { 487.5, 1.310231512 },
      { 488, 1.110249357 },
      { 488.5, 1.973940166 },
      { 489, 1.384498756 },
      { 489.5, 1.24250044 },
      { 490, 1.368200981 },
      { 490.5, 1.148440359 },
      { 491, 1.772160229 },
      { 491.5, 1.198435036 },
      { 492, 1.498661502 },
      { 492.5, 1.738824238 },
      { 493, 1.106892143 },
      { 493.5, 1.507656214 },
      { 494, 1.305356846 },
      { 494.5, 1.321179821 },
      { 495, 1.320305313 },
      { 495.5, 1.36342275 },
      { 496, 1.326824202 },
      { 496.5, 1.400918744 },
      { 497, 1.640052889 },
      { 497.5, 1.350025741 },
      { 498, 1.425143114 },
      { 498.5, 1.403311418 },
      { 499, 1.27883902 },
      { 499.5, 1.050934659 },
      { 500, 1.050934659 }
    };
    if (order == 0){
      return 1.549; // From MATRIX manual, Table 6, process ppwxw02)
    }
    else if (order == 1){
      // Protection for different pT ranges
      pt = std::min(pt, std::min(pt_dxsecNLOdpt_pairs.back().first, pt_dxsecNNLOdpt_pairs.back().first));

      auto it_pt_xsecratio_pair = pt_dxsecNLOdpt_pairs.cbegin();
      auto itEnd_pt_xsecratio_pair = pt_dxsecNLOdpt_pairs.cend();
      for (; it_pt_xsecratio_pair != itEnd_pt_xsecratio_pair; it_pt_xsecratio_pair++){
        auto itNext_pt_xsecratio_pair = it_pt_xsecratio_pair; itNext_pt_xsecratio_pair++;
        if (pt>=it_pt_xsecratio_pair->first && (itNext_pt_xsecratio_pair==itEnd_pt_xsecratio_pair || pt<itNext_pt_xsecratio_pair->first)) break;
      }
      double const& xsec_NLO = it_pt_xsecratio_pair->second;

      it_pt_xsecratio_pair = pt_dxsecNNLOdpt_pairs.cbegin();
      itEnd_pt_xsecratio_pair = pt_dxsecNNLOdpt_pairs.cend();
      for (; it_pt_xsecratio_pair != itEnd_pt_xsecratio_pair; it_pt_xsecratio_pair++){
        auto itNext_pt_xsecratio_pair = it_pt_xsecratio_pair; itNext_pt_xsecratio_pair++;
        if (pt>=it_pt_xsecratio_pair->first && (itNext_pt_xsecratio_pair==itEnd_pt_xsecratio_pair || pt<itNext_pt_xsecratio_pair->first)) break;
      }
      double const& xsec_NNLO = it_pt_xsecratio_pair->second;

      return xsec_NNLO/xsec_NLO;
    }
    else{
      throw cms::Exception("UnknownOrder") << "KFactorHelpers::xsecRatio_qqWW4f_QCD_NLO_NNLO_13TeV_byPt: Order " << order << " is not implemented.";
      return 1;
    }
  }

  double xsecRatio_qqWZ4f_QCD_NLO_NNLO_13TeV_flat(bool isWpZ, unsigned char order){ // order: 0=NLO/LO, 1=NNLO/NLO
    // NLO/LO ratios are from the 2l2nu framework, NNLO/NLO are from the MATRIX manual, Table 6
    return (order == 0 ? (isWpZ ? 28.55/15.51 : 18.19/9.53) : (isWpZ ? 1.106 : 1.111));
  }

  const std::string KFactorHandler_QCD_ggVV_Sig::KFactorArgName = "KFactor_QCD_ggVV_Sig_arg";
  KFactorHandler_QCD_ggVV_Sig::KFactorHandler_QCD_ggVV_Sig(int const& year) :
    KFactorHandlerBase(),
    kfFile_NNLO(nullptr),
    kfFile_NLO(nullptr)
  {
    TString strKFactorDir = "${CMSSW_BASE}/src/CMS3/NtupleMaker/data/Kfactors/";
    HostHelpers::ExpandEnvironmentVariables(strKFactorDir);

    TString strSqrts="";
    switch (year){
    case 2015:
    case 2016:
    case 2017:
    case 2018:
      strSqrts="13TeV";
      break;
    default:
      throw cms::Exception("UnknownYear") << "KFactorHandler_QCD_ggVV_Sig::KFactorHandler_QCD_ggVV_Sig: Year " << year << " is not implemented.";
      break;
    }
    strKFactorDir += strSqrts;

    TString strKFactorNNLOFile = strKFactorDir + "/Kfactor_Collected_ggHZZ_2l2l_NNLO_NNPDF_NarrowWidth_13TeV.root";
    TString strKFactorNLOFile = strKFactorDir + "/Kfactor_Collected_ggHZZ_2l2l_NLO_NNPDF_NarrowWidth_13TeV.root";

    TDirectory* curdir = gDirectory;
    kfFile_NNLO = std::make_shared<TFile>(strKFactorNNLOFile, "read"); curdir->cd();
    kfFile_NLO = std::make_shared<TFile>(strKFactorNLOFile, "read"); curdir->cd();

    this->setup();
  }
  KFactorHandler_QCD_ggVV_Sig::KFactorHandler_QCD_ggVV_Sig(KFactorHandler_QCD_ggVV_Sig const& other) :
    KFactorHandlerBase(other),
    kfFile_NNLO(other.kfFile_NNLO),
    kfFile_NLO(other.kfFile_NLO)
  {
    // Do not copy vectors of splines, get them from scratch again
    this->setup();
  }
  void KFactorHandler_QCD_ggVV_Sig::setup(){
    TDirectory* curdir = gDirectory;

    kfFile_NNLO->cd();
    sp_NNLO.reserve(9);
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_Nominal"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_QCDScaleDn"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_QCDScaleUp"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_PDFScaleDn"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_PDFScaleUp"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_PDFReplicaDn"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_PDFReplicaUp"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_AsDn"));
    sp_NNLO.push_back((TSpline3*) kfFile_NNLO->Get("sp_kfactor_AsUp"));
    for (size_t ikf=0; ikf<sp_NNLO.size(); ikf++){
      if (!sp_NNLO.at(ikf)) throw cms::Exception(Form("KFactorHandler_QCD_ggVV_Sig::setup: NNLO K factor at location %lu cannot be found.", ikf));
    }

    kfFile_NLO->cd();
    sp_NLO.reserve(9);
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_Nominal"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_QCDScaleDn"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_QCDScaleUp"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_PDFScaleDn"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_PDFScaleUp"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_PDFReplicaDn"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_PDFReplicaUp"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_AsDn"));
    sp_NLO.push_back((TSpline3*) kfFile_NLO->Get("sp_kfactor_AsUp"));
    for (size_t ikf=0; ikf<sp_NLO.size(); ikf++){
      if (!sp_NLO.at(ikf)) throw cms::Exception(Form("KFactorHandler_QCD_ggVV_Sig::setup: NLO K factor at location %lu cannot be found.", ikf));
    }

    curdir->cd();
  }
  void KFactorHandler_QCD_ggVV_Sig::eval(KFactorHelpers::KFactorType type, KFactorHelpers::KFactorType denominator, std::unordered_map<std::string, float>& kfactors_map) const{
    static const std::vector<std::string> kfactornames{
      "KFactor_QCD_NNLO_ggVV_Sig_Nominal",
      "KFactor_QCD_NNLO_ggVV_Sig_QCDScaleDn",
      "KFactor_QCD_NNLO_ggVV_Sig_QCDScaleUp",
      "KFactor_QCD_NNLO_ggVV_Sig_PDFScaleDn",
      "KFactor_QCD_NNLO_ggVV_Sig_PDFScaleUp",
      "KFactor_QCD_NNLO_ggVV_Sig_PDFReplicaDn",
      "KFactor_QCD_NNLO_ggVV_Sig_PDFReplicaUp",
      "KFactor_QCD_NNLO_ggVV_Sig_AsDn",
      "KFactor_QCD_NNLO_ggVV_Sig_AsUp",
      "KFactor_QCD_NLO_ggVV_Sig_Nominal",
      "KFactor_QCD_NLO_ggVV_Sig_QCDScaleDn",
      "KFactor_QCD_NLO_ggVV_Sig_QCDScaleUp",
      "KFactor_QCD_NLO_ggVV_Sig_PDFScaleDn",
      "KFactor_QCD_NLO_ggVV_Sig_PDFScaleUp",
      "KFactor_QCD_NLO_ggVV_Sig_PDFReplicaDn",
      "KFactor_QCD_NLO_ggVV_Sig_PDFReplicaUp",
      "KFactor_QCD_NLO_ggVV_Sig_AsDn",
      "KFactor_QCD_NLO_ggVV_Sig_AsUp"
    };
    assert(kfactornames.size()==(this->sp_NNLO.size() + this->sp_NLO.size()));

    auto it_arg = kfactors_map.find(KFactorHandler_QCD_ggVV_Sig::KFactorArgName);
    if (it_arg == kfactors_map.end()) throw cms::Exception(Form("KFactorHandler_QCD_ggVV_Sig::eval: K factor evaluation argument, candidate mass with name %s, cannot be found.", KFactorHandler_QCD_ggVV_Sig::KFactorArgName.data()));
    float const& kfactor_arg = it_arg->second;

    float kfactor_denominator = 1;
    switch (denominator){
    case kf_QCD_NNLO_GGVV_SIG:
      kfactor_denominator = sp_NNLO.front()->Eval(kfactor_arg);
      break;
    case kf_QCD_NLO_GGVV_SIG:
      kfactor_denominator = sp_NLO.front()->Eval(kfactor_arg);
      break;
    default:
      break;
    }

    size_t ikf=0;
    if (type == kf_QCD_NNLO_GGVV_SIG){
      for (auto const& spkf:sp_NNLO){
        kfactors_map[kfactornames.at(ikf)] = spkf->Eval(kfactor_arg) / kfactor_denominator;
        ikf++;
      }
    }
    ikf = sp_NNLO.size();
    if (type == kf_QCD_NLO_GGVV_SIG){
      for (auto const& spkf:sp_NLO){
        kfactors_map[kfactornames.at(ikf)] = spkf->Eval(kfactor_arg) / kfactor_denominator;
        ikf++;
      }
    }
  }


  KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg() :
    KFactorHandlerBase(),
    type(nKFactorTypes),
    beamEnergy(0),

    fcn_Kfactor_QCD_qqZZ(nullptr),
    fcn_Kfactor_QCD_qqWZ(nullptr),
    fcn_Kfactor_QCD_qqWW(nullptr)
  {}
  KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg(int const& year, KFactorHelpers::KFactorType const& type_) :
    KFactorHandlerBase(),
    type(type_),
    beamEnergy(0),

    fcn_Kfactor_QCD_qqZZ(nullptr),
    fcn_Kfactor_QCD_qqWZ(nullptr),
    fcn_Kfactor_QCD_qqWW(nullptr)
  {
    TString strKFactorDir = "${CMSSW_BASE}/src/CMS3/NtupleMaker/data/Kfactors/";
    HostHelpers::ExpandEnvironmentVariables(strKFactorDir);
    unsigned int sqrts=0;
    switch(year){
    case 2011:
      sqrts=7;
      throw cms::Exception("UnknownKFactorQCD") << "KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg: sqrts for year " << year << " does not have QCD K factor functions implemented.";
      break;
    case 2012:
      sqrts=8;
      throw cms::Exception("UnknownKFactorQCD") << "KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg: sqrts for year " << year << " does not have QCD K factor functions implemented.";
      break;
    case 2015:
    case 2016:
    case 2017:
    case 2018:
      sqrts=13;
      fcn_Kfactor_QCD_qqZZ = &(KFactorHelpers::xsecRatio_qqZZ4f_QCD_NLO_NNLO_13TeV_byMass);
      fcn_Kfactor_QCD_qqWZ = &(KFactorHelpers::xsecRatio_qqWZ4f_QCD_NLO_NNLO_13TeV_flat);
      fcn_Kfactor_QCD_qqWW = &(KFactorHelpers::xsecRatio_qqWW4f_QCD_NLO_NNLO_13TeV_byPt);
      break;
    default:
      throw cms::Exception("UnknownYear") << "KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg: sqrts for year " << year << " is not implemented.";
      break;
    }
    strKFactorDir += Form("%uTeV", sqrts);

    TString strKFactorFile;
    if (type == kf_EW_NLO_QQZZ_BKG) strKFactorFile = strKFactorDir + "/ZZ_EWCorrections.dat";
    else if (type == kf_EW_NLO_QQWZ_BKG) strKFactorFile = strKFactorDir + "/WZ_EWCorrections.dat";
    else if (type == kf_EW_NLO_QQWW_BKG) strKFactorFile = strKFactorDir + "/WW_EWCorrections.dat";
    else throw cms::Exception("UnknownType") << "KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg: Correction type " << type << " is not implemented.";
    
    readTableFromFile(strKFactorFile, table_VV);
    beamEnergy = getBeamEnergy(year);

    this->setup();
  }
  KFactorHandler_EW_qqVV_Bkg::KFactorHandler_EW_qqVV_Bkg(KFactorHandler_EW_qqVV_Bkg const& other) :
    KFactorHandlerBase(other),
    type(other.type),
    beamEnergy(other.beamEnergy),
    fcn_Kfactor_QCD_qqZZ(other.fcn_Kfactor_QCD_qqZZ),
    fcn_Kfactor_QCD_qqWZ(other.fcn_Kfactor_QCD_qqWZ),
    fcn_Kfactor_QCD_qqWW(other.fcn_Kfactor_QCD_qqWW),
    table_VV(other.table_VV)
  {
    this->setup();
  }
  
  void KFactorHandler_EW_qqVV_Bkg::readTableFromFile(TString const& fname, std::vector< std::vector<double> >& table){
    //MELAout << "KFactorHandler_EW_qqVV_Bkg::readTableFromFile: Reading table " << fname << endl;
    if (!HostHelpers::FileReadable(fname.Data())) throw cms::Exception("IOError") << "KFactorHandler_EW_qqVV_Bkg::readTableFromFile " << fname << " does not exist!";
    ifstream fin(fname.Data(), ios_base::in);
    while (!fin.eof()){
      std::string strline;
      std::getline(fin, strline);
      if (strline.empty()) continue;

      //MELAout << "=> " << strline << endl;

      table.push_back(std::vector<double>());
      std::vector<double>& tbl_line = table.back(); tbl_line.reserve(5);

      std::stringstream ss(strline);
      std::string strtmp;
      while (ss >> strtmp){
        if (strtmp.empty()) continue;
        tbl_line.push_back(std::stod(strtmp));
      }
      //MELAout << "==>> " << tbl_line << endl;
    }
    //MELAout << "KFactorHandler_EW_qqVV_Bkg::readTableFromFile: Done reading table" << endl;
  }
  std::vector<double> KFactorHandler_EW_qqVV_Bkg::findTableEntry(double const& mhat, double const& that) const{
    std::vector<std::vector<double>>::const_iterator const table_end = table_VV.cend();

    double bestShatDiff = -1;
    std::vector<std::vector<double>>::const_iterator it_bestShat = table_end;
    std::vector<std::vector<double>>::const_iterator itNext_bestShat = table_end;
    for (size_t is=0; is<table_sqrtShatBegin_VV.size()-1;is++){
      auto const& itFirst = table_sqrtShatBegin_VV.at(is);
      auto const& itSecond = table_sqrtShatBegin_VV.at(is+1);
      double tmpShatDiff = std::abs(itFirst->front() - mhat);
      if (bestShatDiff<0. || tmpShatDiff < bestShatDiff){
        bestShatDiff = tmpShatDiff;
        it_bestShat = itFirst;
        itNext_bestShat = itSecond;
      }
    }
    assert(it_bestShat != table_end);

    std::vector<std::vector<double>>::const_iterator it_That = it_bestShat;
    std::vector<std::vector<double>>::const_iterator it_bestThat = table_end;
    double bestThatDiff = -1;
    while (it_That != itNext_bestShat){
      double tmpThatDiff = std::abs(it_That->at(1) - that);
      if (bestThatDiff<0. || tmpThatDiff<bestThatDiff){
        bestThatDiff = tmpThatDiff;
        it_bestThat = it_That;
      }
      it_That++;
    }
    assert(it_bestThat != table_end);

    double const& val_uc = it_bestThat->at(2);
    double const& val_ds = it_bestThat->at(3);
    double const& val_b = it_bestThat->at(4);
    return std::vector<double>{val_uc, val_ds, val_b};
  }

  void KFactorHandler_EW_qqVV_Bkg::setup(){
    double sqrtShat = -1;
    for (std::vector<std::vector<double>>::const_iterator it = table_VV.cbegin(); it!=table_VV.cend(); it++){
      double const& tmpSqrtShat = it->front();
      if (tmpSqrtShat!=sqrtShat){
        sqrtShat = tmpSqrtShat;
        table_sqrtShatBegin_VV.push_back(it);
      }
    }
    table_sqrtShatBegin_VV.push_back(table_VV.cend());
  }

  void KFactorHandler_EW_qqVV_Bkg::eval(
    GenEventInfoProduct const& eventInfo,
    std::vector<reco::GenParticle const*> const& incomingQuarks,
    std::pair<reco::GenParticle const*, reco::GenParticle const*> const& bestV1pair,
    std::pair<reco::GenParticle const*, reco::GenParticle const*> const& bestV2pair,
    std::unordered_map<std::string, float>& kfactors_map
  ) const{
    static const float mZsq = PDGHelpers::Zmass * PDGHelpers::Zmass;
    static const float mWsq = PDGHelpers::Wmass * PDGHelpers::Wmass;
    static const std::vector<std::string> kfactornames{
      "KFactor_EW_NLO_qqVV_Bkg_Nominal",
      "KFactor_EW_NLO_qqVV_Bkg_EWDn",
      "KFactor_EW_NLO_qqVV_Bkg_EWUp"
    };
    static const std::vector<std::string> kfactorargnames{
      "KFactor_EW_NLO_qqVV_Bkg_arg_mass",
      "KFactor_EW_NLO_qqVV_Bkg_arg_that",
      "KFactor_EW_NLO_qqVV_Bkg_arg_pthat",
      "KFactor_EW_NLO_qqVV_Bkg_arg_rho"
    };

    if (!eventInfo.pdf()) throw cms::Exception("InvalidGenEventInfoProduct") << "KFactorHandler_EW_qqVV_Bkg::eval: eventInfo is invalid.";
    if (!(bestV1pair.first && bestV1pair.second)) throw cms::Exception("InvalidKinematics") << "KFactorHandler_EW_qqVV_Bkg::eval: V1 is invalid.";
    if (!(bestV2pair.first && bestV2pair.second)) throw cms::Exception("InvalidKinematics") << "KFactorHandler_EW_qqVV_Bkg::eval: V2 is invalid.";

    if (
      !eventInfo.pdf()
      ||
      !(bestV1pair.first && bestV1pair.second && bestV2pair.first && bestV2pair.second)
      ){
      for (auto const& kfactorname:kfactornames) kfactors_map[kfactorname]=1;
      for (auto const& kfactorname:kfactorargnames) kfactors_map[kfactorname]=0;
      return;
    }
    auto const& x1 = eventInfo.pdf()->x.first;
    auto const& x2 = eventInfo.pdf()->x.second;

    float sum_mV1_mV2 = 0;
    switch (type){
    case kf_EW_NLO_QQZZ_BKG:
      sum_mV1_mV2 = 2.*PDGHelpers::Zmass;
      break;
    case kf_EW_NLO_QQWZ_BKG:
      sum_mV1_mV2 = PDGHelpers::Wmass + PDGHelpers::Zmass;
      break;
    case kf_EW_NLO_QQWW_BKG:
      sum_mV1_mV2 = 2.*PDGHelpers::Wmass;
      break;
    default:
      // Do nothing
      break;
    }

    auto pBestV1 = bestV1pair.first->p4() + bestV1pair.second->p4();
    auto pBestV2 = bestV2pair.first->p4() + bestV2pair.second->p4();
    auto pVV = pBestV1 + pBestV2;
    TLorentzVector pVV_tlv(pVV.px(), pVV.py(), pVV.pz(), pVV.energy());
    double m_hat = pVV.M();
    double pt_hat = pVV.Pt();
    if (m_hat<sum_mV1_mV2){
      for (auto const& kfactorname:kfactornames) kfactors_map[kfactorname]=1;
      kfactors_map[kfactorargnames.at(0)]=m_hat;
      kfactors_map[kfactorargnames.at(1)]=0;
      kfactors_map[kfactorargnames.at(2)]=pt_hat;
      kfactors_map[kfactorargnames.at(3)]=0;
      return;
    }
    double s_hat = std::pow(m_hat, 2);
    double rho = pVV.Pt() / (bestV1pair.first->pt() + bestV1pair.second->pt() + bestV2pair.first->pt() + bestV2pair.second->pt());

    TLorentzVector p1_b, p2_b, pV1_b;
    TVector3 boost_VV = -pVV_tlv.BoostVector();
    pV1_b.SetXYZT(pBestV1.px(), pBestV1.py(), pBestV1.pz(), pBestV1.energy()); pV1_b.Boost(boost_VV);
    p1_b.SetXYZT(0., 0., x1*beamEnergy, x1*beamEnergy); p1_b.Boost(boost_VV);
    p2_b.SetXYZT(0., 0., -x2*beamEnergy, x2*beamEnergy); p2_b.Boost(boost_VV);
    TVector3 nV1_b = pV1_b.Vect().Unit();
    TVector3 n1_b = p1_b.Vect().Unit();
    TVector3 n2_b = p2_b.Vect().Unit();
    TVector3 n_beam = n1_b - n2_b; n_beam = n_beam.Unit();
    double cos_theta = n_beam.Dot(nV1_b);
    double t_hat=0;
    if (type == kf_EW_NLO_QQWW_BKG) t_hat = mWsq - 0.5*s_hat + cos_theta * std::sqrt(0.25*s_hat*s_hat - mWsq*s_hat);
    else if (type == kf_EW_NLO_QQZZ_BKG) t_hat = mZsq - 0.5*s_hat + cos_theta * std::sqrt(0.25*s_hat*s_hat - mZsq*s_hat);
    else{
      double b = 0.5/m_hat * std::sqrt(std::pow(s_hat - mZsq - mWsq, 2) - 4.*mZsq*mWsq);
      double a = std::sqrt(b*b + mZsq);
      t_hat = mZsq - m_hat * (a - b * cos_theta); // Awful calculation, needed to put ourselves to the center-of-mass frame with the 2 particles having a different mass!
    }

    unsigned char qtype = std::abs(incomingQuarks.front()->pdgId());
    std::vector<double> vCorr = findTableEntry(m_hat, t_hat);

    double kfactor = 1. + vCorr.at(1*(qtype==1 || qtype==3) + 2*(qtype==5));
    double rel_error = 0;
    double kfactor_QCD = 1;
    double kfactor_virtphoton = 1;
    if (type == kf_EW_NLO_QQZZ_BKG){ // ZZ
      kfactor_QCD = fcn_Kfactor_QCD_qqZZ(m_hat, !(std::abs(bestV1pair.first->pdgId())==std::abs(bestV2pair.first->pdgId())), 0);
    }
    else if (type == kf_EW_NLO_QQWW_BKG){ // WW
      kfactor_QCD = fcn_Kfactor_QCD_qqWW(pt_hat, 0);
    }
    else if (PDGHelpers::isANeutrino(bestV2pair.first->pdgId()) || PDGHelpers::isUpTypeQuark(bestV2pair.first->pdgId())){ // W+Z
      kfactor_QCD = fcn_Kfactor_QCD_qqWZ(true, 0);
      kfactor_virtphoton = (1. + 0.00559445 - 5.17082e-6 * m_hat + 3.63331e-8 * s_hat);
    }
    else{ // W-Z
      kfactor_QCD = fcn_Kfactor_QCD_qqWZ(false, 0);
      kfactor_virtphoton = (1. + 0.00174737 + 1.70668e-5 * m_hat + 2.26398e-8 * s_hat);
    }

    if (rho<0.3) rel_error = std::abs((kfactor-1.)*(kfactor_QCD - 1.)); //If rho is small, only corrections in QCD X EWK
    else rel_error = std::abs(kfactor-1.); // If rho is large, 100% because of large colinear gluon radiations

    kfactor *= kfactor_virtphoton; // No associated unc.

    kfactors_map[kfactornames.at(0)]=kfactor;
    kfactors_map[kfactornames.at(1)]=kfactor*(1.f - rel_error);
    kfactors_map[kfactornames.at(2)]=kfactor*(1.f + rel_error);

    kfactors_map[kfactorargnames.at(0)]=m_hat;
    kfactors_map[kfactorargnames.at(1)]=t_hat;
    kfactors_map[kfactorargnames.at(2)]=pt_hat;
    kfactors_map[kfactorargnames.at(3)]=rho;
  }


  KFactorHandler_QCD_qqVV_Bkg::KFactorHandler_QCD_qqVV_Bkg() :
    KFactorHandlerBase(),

    fcn_Kfactor_QCD_qqZZ(nullptr),
    fcn_Kfactor_QCD_qqWZ(nullptr),
    fcn_Kfactor_QCD_qqWW(nullptr)
  {}
  KFactorHandler_QCD_qqVV_Bkg::KFactorHandler_QCD_qqVV_Bkg(int const& year) :
    KFactorHandlerBase(),

    fcn_Kfactor_QCD_qqZZ(nullptr),
    fcn_Kfactor_QCD_qqWZ(nullptr),
    fcn_Kfactor_QCD_qqWW(nullptr)
  {
    switch (year){
    case 2015:
    case 2016:
    case 2017:
    case 2018:
      fcn_Kfactor_QCD_qqZZ = &(KFactorHelpers::xsecRatio_qqZZ4f_QCD_NLO_NNLO_13TeV_byMass);
      fcn_Kfactor_QCD_qqWZ = &(KFactorHelpers::xsecRatio_qqWZ4f_QCD_NLO_NNLO_13TeV_flat);
      fcn_Kfactor_QCD_qqWW = &(KFactorHelpers::xsecRatio_qqWW4f_QCD_NLO_NNLO_13TeV_byPt);
      break;
    default:
      throw cms::Exception("UnknownYear") << "KFactorHandler_QCD_qqVV_Bkg::KFactorHandler_QCD_qqVV_Bkg: Year " << year << " is not implemented.";
      break;
    }
  }
  KFactorHandler_QCD_qqVV_Bkg::KFactorHandler_QCD_qqVV_Bkg(KFactorHandler_QCD_qqVV_Bkg const& other) :
    KFactorHandlerBase(other),
    fcn_Kfactor_QCD_qqZZ(other.fcn_Kfactor_QCD_qqZZ),
    fcn_Kfactor_QCD_qqWZ(other.fcn_Kfactor_QCD_qqWZ),
    fcn_Kfactor_QCD_qqWW(other.fcn_Kfactor_QCD_qqWW)
  {}
  void KFactorHandler_QCD_qqVV_Bkg::eval(
    KFactorHelpers::KFactorType type,
    std::pair<reco::GenParticle const*, reco::GenParticle const*> const& bestV1pair,
    std::pair<reco::GenParticle const*, reco::GenParticle const*> const& bestV2pair,
    std::unordered_map<std::string, float>& kfactors_map
  ) const{
    static const std::vector<std::string> kfactornames{
      "KFactor_QCD_NNLO_qqVV_Bkg_Nominal"
    };
    static const std::vector<std::string> kfactorargnames{
      "KFactor_QCD_NNLO_qqVV_Bkg_arg_mass",
      "KFactor_QCD_NNLO_qqVV_Bkg_arg_pthat"
    };

    if (!(bestV1pair.first && bestV1pair.second)) throw cms::Exception("InvalidKinematics") << "KFactorHandler_QCD_qqVV_Bkg::eval: V1 is invalid.";
    if (!(bestV2pair.first && bestV2pair.second)) throw cms::Exception("InvalidKinematics") << "KFactorHandler_QCD_qqVV_Bkg::eval: V2 is invalid.";

    auto pBestV1 = bestV1pair.first->p4() + bestV1pair.second->p4();
    auto pBestV2 = bestV2pair.first->p4() + bestV2pair.second->p4();
    auto pVV = pBestV1 + pBestV2;
    double m_hat = pVV.M();
    double pt_hat = pVV.Pt();

    double kfactor=1;
    if (type == kf_QCD_NNLO_QQZZ_BKG){ // ZZ
      kfactor = fcn_Kfactor_QCD_qqZZ(m_hat, !(std::abs(bestV1pair.first->pdgId())==std::abs(bestV2pair.first->pdgId())), 1);
    }
    else if (type == kf_QCD_NNLO_QQWW_BKG){ // WW
      kfactor = fcn_Kfactor_QCD_qqWW(pt_hat, 1);
    }
    else if (type == kf_QCD_NNLO_QQWZ_BKG){ // WZ
      if (PDGHelpers::isANeutrino(bestV2pair.first->pdgId()) || PDGHelpers::isUpTypeQuark(bestV2pair.first->pdgId())){ // W+Z
        kfactor = fcn_Kfactor_QCD_qqWZ(true, 1);
      }
      else{ // W-Z
        kfactor = fcn_Kfactor_QCD_qqWZ(false, 1);
      }
    }

    kfactors_map[kfactornames.at(0)]=kfactor;

    kfactors_map[kfactorargnames.at(0)]=m_hat;
    kfactors_map[kfactorargnames.at(1)]=pt_hat;
  }

}
